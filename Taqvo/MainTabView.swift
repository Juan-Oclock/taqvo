//
//  MainTabView.swift
//  Taqvo
//
//  Generated by Assistant on 10/17/25
//

import SwiftUI
import UIKit
import Charts
import PhotosUI
import CoreLocation

struct MainTabView: View {
    @EnvironmentObject var appState: AppState
    @State private var selectedTab: Tab = .activity
    @StateObject private var profileService = ProfileService.shared
    @StateObject private var weatherVM = WeatherViewModel()

    enum Tab: Hashable {
        case feed, community, activity, insights, profile
    }

    var body: some View {
        TabView(selection: $selectedTab) {
            FeedView()
                .tabItem {
                    Label("Feed", systemImage: "list.bullet")
                }
                .tag(Tab.feed)

            CommunityView()
                .tabItem {
                    Label("Community", systemImage: "person.3")
                }
                .tag(Tab.community)

            ActivityView(weatherVM: weatherVM)
                .tabItem {
                    VStack {
                        Image(systemName: "figure.run")
                            .symbolEffect(.pulse, options: .repeating, value: selectedTab == .activity)
                        Text("Activity")
                    }
                }
                .tag(Tab.activity)

            InsightsView()
                .tabItem {
                    Label("Insights", systemImage: "chart.bar.fill")
                }
                .tag(Tab.insights)

            ProfileView()
                .tabItem {
                    Label("Profile", systemImage: "person.crop.circle")
                }
                .tag(Tab.profile)
        }
        .onChange(of: appState.navigateToActivity) { _, go in
            if go {
                selectedTab = .activity
                appState.navigateToActivity = false
            }
        }
        .onAppear {
            // Load profile data globally when the main app starts
            Task {
                await profileService.loadCurrentUserProfile()
            }
        }
        .tint(.taqvoCTA)
        .background(Color.taqvoBackgroundDark)
    }
}

struct ActivityView: View {
    @EnvironmentObject var appState: AppState
    @ObservedObject var weatherVM: WeatherViewModel
    @State private var activityType: ActivityType = .run
    @State private var goal: Goal = .none
    @State private var navigateToLive: Bool = false
    @State private var showCountdown: Bool = false
    @State private var countdownValue: Int = 3
    @StateObject private var trackingVM = ActivityTrackingViewModel()
    @StateObject private var locationManager = LocationManager()

    @AppStorage("goalType") private var storedGoalType: String = Goal.none.rawValue
    @AppStorage("goalTimeSeconds") private var storedGoalTimeSeconds: Double = 30 * 60
    @AppStorage("goalDistanceMeters") private var storedGoalDistanceMeters: Double = 5000
    @AppStorage("autoEndOnGoal") private var storedAutoEndOnGoal: Bool = false
    @AppStorage("autoStopMusicOnEnd") private var autoStopMusicOnEnd: Bool = false
    @AppStorage("preferredMusicProvider") private var storedProviderString: String = MusicProvider.spotify.rawValue

    @State private var timeMinutes: Int = 30
    @State private var distanceKilometers: Double = 5.0
    @State private var frequencyPerWeek: Int = 3
    @State private var showGoalEditSheet: Bool = false
    @StateObject private var musicVM = MusicViewModel()
    @StateObject private var spotifyVM = SpotifyViewModel()
    @State private var showPlaylistPicker: Bool = false
    @State private var showSpotifyPicker: Bool = false

    enum ActivityType: String, CaseIterable { 
        case walk
        case run
        case trailRun = "trail run"
        case hiking
    }
    enum Goal: String, CaseIterable { case none, time, distance }
    
    // MARK: - Modern UI Views
    
    private var modernActivitySetup: some View {
        ScrollView {
            VStack(spacing: 24) {
                // Header
                VStack(spacing: 12) {
                    Text("Ready to Move?")
                        .font(.system(size: 32, weight: .bold))
                        .foregroundColor(.taqvoTextDark)
                    
                    Text("Set up your activity")
                        .font(.system(size: 16))
                        .foregroundColor(.taqvoAccentText)
                    
                    // Weather info (only show if available)
                    if weatherVM.temperatureCelsius != nil {
                        HStack(spacing: 8) {
                            Image(systemName: weatherVM.weatherConditionIcon)
                                .font(.system(size: 16, weight: .medium))
                                .foregroundColor(.taqvoCTA)
                            
                            Text(weatherVM.formattedWeatherString)
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(.taqvoAccentText)
                        }
                        .padding(.horizontal, 16)
                        .padding(.vertical, 8)
                        .background(Color.black.opacity(0.1))
                        .cornerRadius(20)
                    }
                }
                .padding(.top, 40)
                
                // Activity Type Cards
                VStack(alignment: .leading, spacing: 12) {
                    Text("Activity Type")
                        .font(.system(size: 14, weight: .semibold))
                        .foregroundColor(.taqvoAccentText)
                        .padding(.horizontal, 16)
                    
                    LazyVGrid(columns: [GridItem(.flexible()), GridItem(.flexible())], spacing: 12) {
                        activityTypeCard(type: .walk, icon: "figure.walk", color: .blue)
                        activityTypeCard(type: .run, icon: "figure.run", color: .red)
                        activityTypeCard(type: .trailRun, icon: "figure.run.circle", color: .orange)
                        activityTypeCard(type: .hiking, icon: "figure.hiking", color: .green)
                    }
                    .padding(.horizontal, 16)
                }
                
                // Goal Display Card
                VStack(alignment: .leading, spacing: 12) {
                    Text("Your Goal")
                        .font(.system(size: 14, weight: .semibold))
                        .foregroundColor(.taqvoAccentText)
                        .padding(.horizontal, 16)
                    
                    currentGoalDisplayCard
                        .padding(.horizontal, 16)
                }
                
                // Start Button
                Button {
                    prepareAndStartCountdown()
                } label: {
                    HStack(spacing: 12) {
                        Image(systemName: "play.fill")
                            .font(.system(size: 20))
                        Text("Start Activity")
                            .font(.system(size: 18, weight: .bold))
                    }
                    .foregroundColor(.black)
                    .frame(maxWidth: .infinity)
                    .frame(height: 60)
                    .background(Color.taqvoCTA)
                    .cornerRadius(30)
                }
                .padding(.horizontal, 16)
                .padding(.top, 20)
                .padding(.bottom, 40)
            }
        }
    }
    
    private func activityTypeCard(type: ActivityType, icon: String, color: Color) -> some View {
        Button {
            withAnimation(.spring(response: 0.3)) {
                activityType = type
            }
        } label: {
            VStack(spacing: 12) {
                Image(systemName: icon)
                    .font(.system(size: 32))
                    .foregroundColor(activityType == type ? color : .gray)
                
                Text(type.rawValue.capitalized)
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(activityType == type ? .taqvoTextDark : .taqvoAccentText)
            }
            .frame(maxWidth: .infinity)
            .frame(height: 100)
            .background(activityType == type ? color.opacity(0.15) : Color.black.opacity(0.2))
            .cornerRadius(16)
            .overlay(
                RoundedRectangle(cornerRadius: 16)
                    .stroke(activityType == type ? color : Color.clear, lineWidth: 2)
            )
        }
    }
    
    private func goalCard(type: Goal, icon: String, title: String) -> some View {
        Button {
            withAnimation(.spring(response: 0.3)) {
                goal = type
            }
        } label: {
            HStack(spacing: 16) {
                Image(systemName: icon)
                    .font(.system(size: 20))
                    .foregroundColor(goal == type ? .taqvoCTA : .gray)
                    .frame(width: 40)
                
                Text(title)
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(goal == type ? .taqvoTextDark : .taqvoAccentText)
                
                Spacer()
                
                if goal == type {
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(.taqvoCTA)
                        .font(.system(size: 20))
                }
            }
            .padding(16)
            .background(goal == type ? Color.taqvoCTA.opacity(0.1) : Color.black.opacity(0.2))
            .cornerRadius(16)
            .overlay(
                RoundedRectangle(cornerRadius: 16)
                    .stroke(goal == type ? Color.taqvoCTA : Color.clear, lineWidth: 2)
            )
        }
    }
    
    // MARK: - Current Goal Display Card
    private var currentGoalDisplayCard: some View {
        VStack(spacing: 16) {
            // Goal Icon and Title
            HStack(spacing: 12) {
                Image(systemName: goalIcon)
                    .font(.system(size: 24, weight: .medium))
                    .foregroundColor(.taqvoCTA)
                    .frame(width: 40, height: 40)
                    .background(Color.taqvoCTA.opacity(0.15))
                    .cornerRadius(20)
                
                VStack(alignment: .leading, spacing: 4) {
                    Text(goalTitle)
                        .font(.system(size: 16, weight: .semibold))
                        .foregroundColor(.taqvoTextDark)
                    
                    Text(goalDescription)
                        .font(.system(size: 13, weight: .regular))
                        .foregroundColor(.taqvoAccentText)
                        .lineLimit(2)
                }
                
                Spacer()
                
                // Edit Button
                Button(action: {
                    showGoalEditSheet = true
                }) {
                    Image(systemName: "pencil.circle.fill")
                        .font(.system(size: 28))
                        .foregroundColor(.taqvoCTA)
                }
            }
        }
        .padding(16)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
        .sheet(isPresented: $showGoalEditSheet) {
            goalEditSheet
        }
    }
    
    private var goalIcon: String {
        switch goal {
        case .none: return "infinity"
        case .distance: return "location.fill"
        case .time: return "clock.fill"
        }
    }
    
    private var goalTitle: String {
        switch goal {
        case .none: return "Free Run"
        case .distance: return "Distance Goal"
        case .time: return "Time Goal"
        }
    }
    
    private var goalDescription: String {
        switch goal {
        case .none:
            return "No specific goal - track freely"
        case .distance:
            return "\(frequencyPerWeek)x/week, \(String(format: "%.1f", distanceKilometers))km each"
        case .time:
            return "\(frequencyPerWeek)x/week, \(timeMinutes)min each"
        }
    }
    
    // MARK: - Goal Edit Sheet
    private var goalEditSheet: some View {
        NavigationStack {
            ZStack {
                Color(red: 79/255, green: 79/255, blue: 79/255)
                    .ignoresSafeArea()
                
                ScrollView {
                    VStack(spacing: 24) {
                        // Goal Type Selection
                        VStack(alignment: .leading, spacing: 12) {
                            Text("Goal Type")
                                .font(.system(size: 14, weight: .semibold))
                                .foregroundColor(.white.opacity(0.7))
                            
                            VStack(spacing: 12) {
                                goalEditCard(type: .none, icon: "infinity", title: "Free Run")
                                goalEditCard(type: .distance, icon: "location.fill", title: "Distance Goal")
                                goalEditCard(type: .time, icon: "clock.fill", title: "Time Goal")
                            }
                        }
                        
                        // Goal Details
                        if goal == .distance {
                            distanceGoalEditDetail
                        } else if goal == .time {
                            timeGoalEditDetail
                        }
                        
                        // Frequency Selector
                        if goal != .none {
                            VStack(alignment: .leading, spacing: 12) {
                                Text("Frequency per week")
                                    .font(.system(size: 14, weight: .semibold))
                                    .foregroundColor(.white.opacity(0.7))
                                
                                HStack(spacing: 8) {
                                    ForEach(1...7, id: \.self) { day in
                                        Button(action: {
                                            withAnimation(.spring(response: 0.2)) {
                                                frequencyPerWeek = day
                                            }
                                        }) {
                                            Text("\(day)")
                                                .font(.system(size: 16, weight: .semibold))
                                                .foregroundColor(frequencyPerWeek == day ? .black : .white)
                                                .frame(width: 40, height: 40)
                                                .background(frequencyPerWeek == day ? Color.taqvoCTA : Color.white.opacity(0.1))
                                                .cornerRadius(20)
                                        }
                                    }
                                }
                            }
                            .padding(16)
                            .background(Color.black.opacity(0.2))
                            .cornerRadius(16)
                        }
                    }
                    .padding(20)
                }
            }
            .navigationTitle("Edit Goal")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .topBarTrailing) {
                    Button("Done") {
                        saveGoalChanges()
                        showGoalEditSheet = false
                    }
                    .foregroundColor(.taqvoCTA)
                }
                
                ToolbarItem(placement: .topBarLeading) {
                    Button("Cancel") {
                        showGoalEditSheet = false
                    }
                    .foregroundColor(.white.opacity(0.7))
                }
            }
        }
    }
    
    private func goalEditCard(type: Goal, icon: String, title: String) -> some View {
        Button {
            withAnimation(.spring(response: 0.3)) {
                goal = type
            }
        } label: {
            HStack(spacing: 12) {
                Image(systemName: icon)
                    .font(.system(size: 20))
                    .foregroundColor(goal == type ? .taqvoCTA : .white.opacity(0.6))
                    .frame(width: 36, height: 36)
                    .background(goal == type ? Color.taqvoCTA.opacity(0.15) : Color.white.opacity(0.05))
                    .cornerRadius(18)
                
                Text(title)
                    .font(.system(size: 16, weight: .semibold))
                    .foregroundColor(goal == type ? .white : .white.opacity(0.7))
                
                Spacer()
                
                if goal == type {
                    Image(systemName: "checkmark.circle.fill")
                        .font(.system(size: 20))
                        .foregroundColor(.taqvoCTA)
                }
            }
            .padding(16)
            .background(goal == type ? Color.taqvoCTA.opacity(0.1) : Color.black.opacity(0.2))
            .cornerRadius(12)
        }
    }
    
    private var distanceGoalEditDetail: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Distance per session")
                .font(.system(size: 14, weight: .semibold))
                .foregroundColor(.white.opacity(0.7))
            
            HStack {
                Spacer()
                Text(String(format: "%.1f", distanceKilometers))
                    .font(.system(size: 28, weight: .bold))
                    .foregroundColor(.white)
                Text("km")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.white.opacity(0.6))
                Spacer()
            }
            
            Slider(value: $distanceKilometers, in: 1...42.2, step: 0.5)
                .tint(.taqvoCTA)
            
            HStack {
                Text("1 km")
                    .font(.system(size: 12))
                    .foregroundColor(.white.opacity(0.5))
                Spacer()
                Text("42.2 km")
                    .font(.system(size: 12))
                    .foregroundColor(.white.opacity(0.5))
            }
        }
        .padding(16)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    private var timeGoalEditDetail: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Duration per session")
                .font(.system(size: 14, weight: .semibold))
                .foregroundColor(.white.opacity(0.7))
            
            HStack {
                Spacer()
                Text("\(timeMinutes)")
                    .font(.system(size: 28, weight: .bold))
                    .foregroundColor(.white)
                Text("min")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.white.opacity(0.6))
                Spacer()
            }
            
            Slider(value: Binding(get: { Double(timeMinutes) }, set: { timeMinutes = Int($0) }), in: 10...180, step: 5)
                .tint(.taqvoCTA)
            
            HStack {
                Text("10 min")
                    .font(.system(size: 12))
                    .foregroundColor(.white.opacity(0.5))
                Spacer()
                Text("180 min")
                    .font(.system(size: 12))
                    .foregroundColor(.white.opacity(0.5))
            }
        }
        .padding(16)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    private func saveGoalChanges() {
        // Save to UserDefaults
        UserDefaults.standard.set(goal.rawValue, forKey: "defaultGoalType")
        UserDefaults.standard.set(frequencyPerWeek, forKey: "defaultFrequencyPerWeek")
        
        if goal == .distance {
            UserDefaults.standard.set(distanceKilometers * 1000, forKey: "defaultDistanceGoalMeters")
        } else if goal == .time {
            UserDefaults.standard.set(Double(timeMinutes * 60), forKey: "defaultTimeGoalSeconds")
        }
        
        // Also save to AppStorage keys
        storedGoalType = goal.rawValue
        storedGoalDistanceMeters = distanceKilometers * 1000
        storedGoalTimeSeconds = Double(timeMinutes * 60)
    }
    
    private var distanceGoalDetail: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text("Target Distance")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(.taqvoAccentText)
                Spacer()
                Text(String(format: "%.1f km", distanceKilometers))
                    .font(.system(size: 20, weight: .bold))
                    .foregroundColor(.taqvoCTA)
            }
            
            Slider(value: $distanceKilometers, in: 1...42.2, step: 0.5)
                .tint(.taqvoCTA)
            
            HStack {
                Text("1 km")
                    .font(.system(size: 12))
                    .foregroundColor(.taqvoAccentText)
                Spacer()
                Text("42.2 km")
                    .font(.system(size: 12))
                    .foregroundColor(.taqvoAccentText)
            }
        }
        .padding(16)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
        .padding(.horizontal, 16)
    }
    
    private var timeGoalDetail: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text("Target Time")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(.taqvoAccentText)
                Spacer()
                Text("\(timeMinutes) min")
                    .font(.system(size: 20, weight: .bold))
                    .foregroundColor(.taqvoCTA)
            }
            
            Slider(value: Binding(get: { Double(timeMinutes) }, set: { timeMinutes = Int($0) }), in: 10...180, step: 5)
                .tint(.taqvoCTA)
            
            HStack {
                Text("10 min")
                    .font(.system(size: 12))
                    .foregroundColor(.taqvoAccentText)
                Spacer()
                Text("180 min")
                    .font(.system(size: 12))
                    .foregroundColor(.taqvoAccentText)
            }
        }
        .padding(16)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
        .padding(.horizontal, 16)
    }
    
    private var countdownView: some View {
        ZStack {
            Color.taqvoBackgroundDark.ignoresSafeArea()
            
            VStack(spacing: 40) {
                Text("Get Ready!")
                    .font(.system(size: 24, weight: .semibold))
                    .foregroundColor(.taqvoTextDark)
                
                ZStack {
                    Circle()
                        .stroke(Color.gray.opacity(0.2), lineWidth: 8)
                        .frame(width: 200, height: 200)
                    
                    Circle()
                        .trim(from: 0, to: CGFloat(4 - countdownValue) / 3)
                        .stroke(Color.taqvoCTA, style: StrokeStyle(lineWidth: 8, lineCap: .round))
                        .frame(width: 200, height: 200)
                        .rotationEffect(.degrees(-90))
                        .animation(.linear(duration: 1), value: countdownValue)
                    
                    Text("\(countdownValue)")
                        .font(.system(size: 80, weight: .bold))
                        .foregroundColor(.taqvoCTA)
                }
                
                Text(activityType.rawValue.capitalized)
                    .font(.system(size: 18, weight: .medium))
                    .foregroundColor(.taqvoAccentText)
                
                Button {
                    cancelCountdown()
                } label: {
                    Text("Cancel")
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(.red)
                        .padding(.horizontal, 32)
                        .padding(.vertical, 12)
                        .background(Color.red.opacity(0.1))
                        .cornerRadius(20)
                }
            }
        }
        .onAppear {
            startCountdown()
        }
    }
    
    // MARK: - Helper Functions
    
    private func prepareAndStartCountdown() {
        // Map selected type into tracking kind
        switch activityType {
        case .walk: trackingVM.setActivityKind(.walk)
        case .run: trackingVM.setActivityKind(.run)
        case .trailRun: trackingVM.setActivityKind(.trailRun)
        case .hiking: trackingVM.setActivityKind(.hiking)
        }
        
        switch goal {
        case .none:
            trackingVM.setTimeGoal(nil)
            trackingVM.setDistanceGoal(nil)
        case .time:
            trackingVM.setTimeGoal(Double(timeMinutes * 60))
            trackingVM.setDistanceGoal(nil)
        case .distance:
            trackingVM.setDistanceGoal(distanceKilometers * 1000.0)
            trackingVM.setTimeGoal(nil)
        }
        trackingVM.autoEndOnGoal = storedAutoEndOnGoal
        
        withAnimation {
            showCountdown = true
            countdownValue = 3
        }
    }
    
    private func startCountdown() {
        Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { timer in
            if countdownValue > 1 {
                withAnimation {
                    countdownValue -= 1
                }
            } else {
                timer.invalidate()
                showCountdown = false
                navigateToLive = true
            }
        }
    }
    
    private func cancelCountdown() {
        withAnimation {
            showCountdown = false
            countdownValue = 3
        }
    }

    var body: some View {
        NavigationStack {
            ZStack {
                Color.taqvoBackgroundDark.ignoresSafeArea()
                
                if showCountdown {
                    countdownView
                } else {
                    modernActivitySetup
                }
            }
            .navigationBarHidden(true)


            .onAppear {
                // Hydrate baseline from storage
                goal = Goal(rawValue: storedGoalType) ?? .none
                timeMinutes = max(5, min(180, Int(storedGoalTimeSeconds / 60)))
                distanceKilometers = max(1.0, min(42.2, storedGoalDistanceMeters / 1000.0))
                
                // Load frequency from onboarding preferences
                if let savedFrequency = UserDefaults.standard.object(forKey: "defaultFrequencyPerWeek") as? Int {
                    frequencyPerWeek = savedFrequency
                }
                
                // Load goal from onboarding if not set
                if let savedGoalType = UserDefaults.standard.string(forKey: "defaultGoalType") {
                    if let goalType = Goal(rawValue: savedGoalType) {
                        goal = goalType
                    }
                }
                if let savedDistance = UserDefaults.standard.object(forKey: "defaultDistanceGoalMeters") as? Double {
                    distanceKilometers = savedDistance / 1000.0
                }
                if let savedTime = UserDefaults.standard.object(forKey: "defaultTimeGoalSeconds") as? Double {
                    timeMinutes = Int(savedTime / 60.0)
                }
                
                // Apply intents for preselection if present
                if let intent = appState.activityIntent {
                    switch intent {
                    case .walk: activityType = .walk
                    case .run: activityType = .run
                    case .trailRun: activityType = .trailRun
                    case .hiking: activityType = .hiking
                    }
                }
                if let goalIntent = appState.goalIntentType {
                    switch goalIntent {
                    case .none:
                        goal = .none
                    case .time:
                        goal = .time
                        if let seconds = appState.goalIntentSeconds {
                            timeMinutes = max(10, min(180, Int(seconds / 60)))
                        }
                    case .distance:
                        goal = .distance
                        if let meters = appState.goalIntentMeters {
                            distanceKilometers = max(1.0, min(42.2, meters / 1000.0))
                        }
                    }
                }

                // Clear intents after applying
                appState.activityIntent = nil
                appState.goalIntentType = nil
                appState.goalIntentSeconds = nil
                appState.goalIntentMeters = nil

                // Music hooks
                if musicVM.isAuthorized {
                    musicVM.startObserving()
                    musicVM.loadPlaylists()
                }
                Task { if spotifyVM.isAuthorized { await spotifyVM.refreshState() } }
                
                // Fetch weather based on location
                locationManager.requestLocation()
            }
            .onChange(of: locationManager.location) { _, newLocation in
                if let location = newLocation {
                    Task {
                        await weatherVM.fetchWeather(for: location)
                    }
                }
            }
            .navigationDestination(isPresented: $navigateToLive) {
                LiveActivityView()
                    .environmentObject(trackingVM)
            }
            .sheet(isPresented: $showPlaylistPicker) {
                PlaylistPickerView(musicVM: musicVM)
            }
            .sheet(isPresented: $showSpotifyPicker) {
                SpotifyPlaylistPickerView(spotifyVM: spotifyVM)
            }
        }
    }
}

struct SupportView: View {
    var body: some View {
        List {
            Section("Help & FAQ") {
                Text("Getting started with Taqvo")
                Text("Tracking accuracy and tips")
                Text("Sharing and privacy settings")
            }
            Section("Contact") {
                Link("Email support", destination: URL(string: "mailto:support@taqvo.app")!)
                Link("Privacy Policy", destination: URL(string: "https://taqvo.app/privacy")!)
                Link("Terms of Service", destination: URL(string: "https://taqvo.app/terms")!)
            }
        }
        .scrollContentBackground(.hidden)
        .background(Color.taqvoBackgroundDark)
        .navigationTitle("Support")
    }
}

struct FeedView: View {
    @EnvironmentObject var store: ActivityStore
    @State private var selectedActivity: FeedActivity?
    
    private var sortedActivities: [FeedActivity] {
        let currentUserId = SupabaseAuthManager.shared.userId ?? ""
        return store.activities
            .filter { activity in
                if activity.userId == currentUserId { return true }
                return activity.visibility == .publicFeed
            }
            .sorted { $0.endDate > $1.endDate }
    }

    var body: some View {
        NavigationStack {
            ZStack {
                Color.taqvoBackgroundDark.ignoresSafeArea()
                
                if sortedActivities.isEmpty {
                    emptyStateView
                } else {
                    ScrollView(showsIndicators: false) {
                        LazyVStack(spacing: 12) {
                            ForEach(sortedActivities) { activity in
                                ModernActivityCard(activity: activity)
                                    .environmentObject(store)
                                    .onTapGesture {
                                        selectedActivity = activity
                                    }
                            }
                        }
                        .padding(.horizontal, 12)
                        .padding(.top, 8)
                        .padding(.bottom, 20)
                    }
                    .refreshable {
                        await refreshFeed()
                    }
                }
            }
            .navigationTitle("Feed")
            .navigationBarTitleDisplayMode(.inline)
            .navigationDestination(item: $selectedActivity) { activity in
                ActivityDetailView(activity: activity)
            }
        }
    }
    
    private var emptyStateView: some View {
        VStack(spacing: 24) {
            Image(systemName: "figure.run")
                .font(.system(size: 64, weight: .thin))
                .foregroundColor(.taqvoCTA.opacity(0.5))
            
            VStack(spacing: 8) {
                Text("No Activities")
                    .font(.system(size: 24, weight: .semibold))
                    .foregroundColor(.taqvoTextDark)
                
                Text("Complete your first activity\nto see it here")
                    .font(.system(size: 15))
                    .foregroundColor(.taqvoAccentText)
                    .multilineTextAlignment(.center)
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
    
    private func refreshFeed() async {
        try? await Task.sleep(nanoseconds: 500_000_000)
    }
}

// MARK: - Modern Activity Card (FitFlow Style)

struct ModernActivityCard: View {
    let activity: FeedActivity
    @EnvironmentObject var store: ActivityStore
    @State private var showCommentsSheet = false
    
    private var displayUsername: String {
        // Always display the actual username if available
        if let username = activity.username, !username.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
            return username
        }
        
        // Fallback to "User" if no username is set
        return "User"
    }
    
    private var activityIcon: String {
        switch activity.kind {
        case .walk: return "figure.walk"
        case .run: return "figure.run"
        case .trailRun: return "figure.run.circle"
        case .hiking: return "figure.hiking"
        }
    }
    
    private var activityTitle: String {
        if let title = activity.title, !title.isEmpty {
            return title
        }
        switch activity.kind {
        case .walk: return "Morning Walk"
        case .run: return "Morning Run"
        case .trailRun: return "Morning Trail Run"
        case .hiking: return "Morning Hike"
        }
    }
    
    private var isLikedByCurrentUser: Bool {
        guard let currentUserId = SupabaseAuthManager.shared.userId else { return false }
        return activity.likedByUserIds.contains(currentUserId)
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Header with user info
            HStack(spacing: 12) {
                profileImage
                    .frame(width: 44, height: 44)
                    .clipShape(Circle())
                
                VStack(alignment: .leading, spacing: 2) {
                    Text(displayUsername)
                        .font(.system(size: 16, weight: .semibold))
                        .foregroundColor(.white)
                    
                    Text(timeAgo)
                        .font(.system(size: 13))
                        .foregroundColor(.gray)
                }
                
                Spacer()
                
                Image(systemName: activityIcon)
                    .font(.system(size: 24))
                    .foregroundColor(.taqvoCTA)
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 14)
            
            // Map/Photo
            mapOrPhotoView
                .frame(height: 200)
                .clipped()
            
            // Activity Title & Stats
            VStack(alignment: .leading, spacing: 16) {
                // Title
                Text(activityTitle)
                    .font(.system(size: 24, weight: .bold))
                    .foregroundColor(.white)
                
                // Stats Row
                HStack(spacing: 24) {
                    StatItem(
                        label: "Distance",
                        value: String(format: "%.1f", activity.distanceMeters / 1000),
                        unit: "km"
                    )
                    
                    StatItem(
                        label: "Time",
                        value: ActivityTrackingViewModel.formattedDuration(activity.durationSeconds),
                        unit: ""
                    )
                    
                    StatItem(
                        label: "Pace",
                        value: ActivityTrackingViewModel.formattedPace(
                            distanceMeters: activity.distanceMeters,
                            durationSeconds: activity.durationSeconds
                        ),
                        unit: ""
                    )
                }
                
                // Note if available
                if let note = activity.note, !note.isEmpty {
                    Text(note)
                        .font(.system(size: 14))
                        .foregroundColor(.gray)
                        .lineLimit(2)
                }
                
                // Actions
                HStack(spacing: 24) {
                    Button {
                        store.toggleLike(activityID: activity.id)
                    } label: {
                        HStack(spacing: 6) {
                            Image(systemName: isLikedByCurrentUser ? "heart.fill" : "heart")
                                .font(.system(size: 22))
                                .foregroundColor(isLikedByCurrentUser ? .red : .white)
                            
                            if activity.likeCount > 0 {
                                Text("\(activity.likeCount)")
                                    .font(.system(size: 15, weight: .medium))
                                    .foregroundColor(.white)
                            }
                        }
                    }
                    
                    Button {
                        showCommentsSheet = true
                    } label: {
                        HStack(spacing: 6) {
                            Image(systemName: "message")
                                .font(.system(size: 22))
                                .foregroundColor(.white)
                            
                            if !activity.comments.isEmpty {
                                Text("\(activity.comments.count)")
                                    .font(.system(size: 15, weight: .medium))
                                    .foregroundColor(.white)
                            }
                        }
                    }
                    
                    Button {
                        // Share action
                    } label: {
                        Image(systemName: "square.and.arrow.up")
                            .font(.system(size: 22))
                            .foregroundColor(.white)
                    }
                    
                    Spacer()
                }
            }
            .padding(16)
        }
        .background(Color(red: 0.15, green: 0.15, blue: 0.15))
        .clipShape(RoundedRectangle(cornerRadius: 16))
        .sheet(isPresented: $showCommentsSheet) {
            CommentsBottomSheet(isPresented: $showCommentsSheet, activity: activity)
                .environmentObject(store)
        }
    }
    
    private var profileImage: some View {
        Group {
            if let avatarUrl = activity.avatarUrl, !avatarUrl.isEmpty {
                if avatarUrl.hasPrefix("http") || avatarUrl.hasPrefix("https") {
                    // Remote URL from Supabase storage
                    AsyncImage(url: URL(string: avatarUrl)) { phase in
                        switch phase {
                        case .success(let image):
                            image
                                .resizable()
                                .aspectRatio(contentMode: .fill)
                        case .failure(let error):
                            let _ = print("DEBUG: AsyncImage failed to load: \(error)")
                            placeholderAvatar
                        case .empty:
                            ProgressView()
                                .frame(width: 44, height: 44)
                        @unknown default:
                            placeholderAvatar
                        }
                    }
                } else if let data = Data(base64Encoded: avatarUrl), let uiImage = UIImage(data: data) {
                    // Base64 encoded image
                    Image(uiImage: uiImage)
                        .resizable()
                        .aspectRatio(contentMode: .fill)
                } else {
                    let _ = print("DEBUG: Invalid avatar URL format: \(avatarUrl)")
                    placeholderAvatar
                }
            } else {
                let _ = print("DEBUG: No avatar URL for activity: \(activity.id)")
                placeholderAvatar
            }
        }
    }
    
    private var placeholderAvatar: some View {
        Circle()
            .fill(Color.gray.opacity(0.3))
            .overlay(
                Image(systemName: "person.fill")
                    .foregroundColor(.gray.opacity(0.6))
                    .font(.system(size: 18))
            )
    }
    
    private var mapOrPhotoView: some View {
        Group {
            if let data = activity.photoPNG, let img = UIImage(data: data) {
                Image(uiImage: img)
                    .resizable()
                    .aspectRatio(contentMode: .fill)
            } else if let data = activity.snapshotPNG, let img = UIImage(data: data) {
                Image(uiImage: img)
                    .resizable()
                    .aspectRatio(contentMode: .fill)
            } else {
                MapRouteView(route: ActivityStore.clCoordinates(from: activity.route))
            }
        }
    }
    
    private var timeAgo: String {
        let now = Date()
        let interval = now.timeIntervalSince(activity.endDate)
        
        if interval < 60 {
            return "just now"
        } else if interval < 3600 {
            let minutes = Int(interval / 60)
            return "\(minutes)m ago"
        } else if interval < 86400 {
            let hours = Int(interval / 3600)
            return "\(hours)h ago"
        } else if interval < 604800 {
            let days = Int(interval / 86400)
            return "\(days)d ago"
        } else {
            return activity.endDate.formatted(date: .abbreviated, time: .omitted)
        }
    }
}

struct StatItem: View {
    let label: String
    let value: String
    let unit: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 4) {
            Text(label)
                .font(.system(size: 11))
                .foregroundColor(.gray)
                .textCase(.uppercase)
            
            HStack(alignment: .firstTextBaseline, spacing: 2) {
                Text(value)
                    .font(.system(size: 28, weight: .bold))
                    .foregroundColor(.white)
                    .lineLimit(1)
                    .minimumScaleFactor(0.7)
                
                if !unit.isEmpty {
                    Text(unit)
                        .font(.system(size: 14))
                        .foregroundColor(.gray)
                }
            }
        }
    }
}

// Keep old ActivityRow for backward compatibility if needed elsewhere
struct ActivityRow: View {
    let activity: FeedActivity
    let onTapActivity: (() -> Void)?
    @EnvironmentObject var store: ActivityStore
    @State private var showCommentsBottomSheet: Bool = false

    private var paceString: String {
        ActivityTrackingViewModel.formattedPace(distanceMeters: activity.distanceMeters,
                                               durationSeconds: activity.durationSeconds)
    }

    private var verb: String {
        switch activity.kind {
        case .walk: return "Walked"
        case .run: return "Ran"
        case .trailRun: return "Trail Ran"
        case .hiking: return "Hiked"
        }
    }
    
    private var isLikedByCurrentUser: Bool {
        guard let currentUserId = SupabaseAuthManager.shared.userId else { return false }
        return activity.likedByUserIds.contains(currentUserId)
    }

    private func compositeShareImageURL() -> URL {
        // Compose a lightweight share image with snapshot/photo and metrics overlay
        let view = ZStack {
            if let data = activity.snapshotPNG, let img = UIImage(data: data) {
                Image(uiImage: img).resizable().aspectRatio(contentMode: .fill)
            } else if let data = activity.photoPNG, let img = UIImage(data: data) {
                Image(uiImage: img).resizable().aspectRatio(contentMode: .fill)
            } else {
                Color.black.opacity(0.8)
            }
            VStack(alignment: .leading, spacing: 6) {
                let header: String = {
                    let t = activity.title?.trimmingCharacters(in: .whitespacesAndNewlines)
                    if let t, !t.isEmpty { return t }
                    return "\(verb) \(String(format: "%.2f km", activity.distanceMeters/1000.0))"
                }()
                Text(header)
                    .font(.headline)
                    .foregroundColor(.white)
                    .shadow(color: .black.opacity(0.6), radius: 2)
                HStack(spacing: 12) {
                    Text(ActivityTrackingViewModel.formattedDuration(activity.durationSeconds))
                    Text(ActivityTrackingViewModel.formattedPace(distanceMeters: activity.distanceMeters, durationSeconds: activity.durationSeconds))
                    Text(String(format: "%.0f kcal", activity.caloriesKilocalories))
                }
                .font(.subheadline)
                .foregroundColor(.white)
                .shadow(color: .black.opacity(0.6), radius: 2)
                Text(activity.endDate.formatted(date: .abbreviated, time: .shortened))
                    .font(.caption)
                    .foregroundColor(.white.opacity(0.9))
                    .shadow(color: .black.opacity(0.6), radius: 2)
                Spacer()
                HStack {
                    Image(systemName: "figure.run")
                    Text("Taqvo")
                }
                .font(.caption)
                .foregroundColor(.white.opacity(0.9))
                .padding(.top, 8)
            }
            .padding()
            .frame(maxWidth: .infinity, alignment: .leading)
        }
        .frame(width: 800, height: 450)

        let renderer = ImageRenderer(content: view)
        renderer.scale = 2
        let url = FileManager.default.temporaryDirectory.appendingPathComponent("taqvo-share-\(Int(activity.endDate.timeIntervalSince1970)).png")
        if let uiImg = renderer.uiImage, let data = uiImg.pngData() {
            try? data.write(to: url)
        } else {
            // Guaranteed PNG fallback
            let size = CGSize(width: 800, height: 450)
            UIGraphicsBeginImageContextWithOptions(size, true, 2)
            UIColor.black.setFill()
            UIBezierPath(rect: CGRect(origin: .zero, size: size)).fill()
            let fallback = UIGraphicsGetImageFromCurrentImageContext()
            UIGraphicsEndImageContext()
            if let data = fallback?.pngData() { try? data.write(to: url) }
        }
        return url
    }


    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            // Main content area with tap gesture for navigation
            VStack(alignment: .leading, spacing: 8) {
                // Headline uses custom title if available, otherwise verb + distance
                if let t = activity.title?.trimmingCharacters(in: .whitespacesAndNewlines), !t.isEmpty {
                    Text(t).font(.headline)
                } else {
                    Text("\(verb) \(String(format: "%.2f km", activity.distanceMeters/1000.0))").font(.headline)
                }
                if let data = activity.photoPNG, let img = UIImage(data: data) {
                    Image(uiImage: img)
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .cornerRadius(12)
                } else if let data = activity.snapshotPNG, let img = UIImage(data: data) {
                    Image(uiImage: img)
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .cornerRadius(12)
                } else {
                    MapRouteView(route: ActivityStore.clCoordinates(from: activity.route))
                        .frame(height: 180)
                        .cornerRadius(12)
                }

                HStack {
                    Text(String(format: "%.2f km", activity.distanceMeters/1000.0))
                        .foregroundColor(.taqvoTextDark)
                        .font(.headline)
                    Spacer()
                    Text(ActivityTrackingViewModel.formattedDuration(activity.durationSeconds))
                        .foregroundColor(.taqvoTextDark)
                        .font(.headline)
                    Spacer()
                    Text(paceString)
                        .foregroundColor(.taqvoAccentText)
                        .font(.subheadline)
                }
                HStack {
                    Text(verb)
                        .foregroundColor(.taqvoAccentText)
                        .font(.caption)
                    Spacer()
                    Text(String(format: "%.0f kcal", activity.caloriesKilocalories))
                        .foregroundColor(.taqvoAccentText)
                        .font(.caption)
                }
                if let title = activity.challengeTitle, !title.isEmpty {
                    HStack(spacing: 8) {
                        HStack(spacing: 4) {
                            Image(systemName: "flag.2.crossed")
                                .font(.caption2)
                            Text(title)
                                .font(.caption)
                        }
                        .foregroundColor(.taqvoCTA)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 4)
                        .background(Color.taqvoCTA.opacity(0.12))
                        .overlay(
                            RoundedRectangle(cornerRadius: 8)
                                .stroke(Color.taqvoCTA, lineWidth: 1)
                        )
                        .cornerRadius(8)

                        if let isPublic = activity.challengeIsPublic {
                            HStack(spacing: 4) {
                                Image(systemName: isPublic ? "globe" : "lock.fill")
                                    .font(.caption2)
                                Text(isPublic ? "Public" : "Private")
                                    .font(.caption)
                            }
                            .foregroundColor(isPublic ? .taqvoCTA : .taqvoAccentText)
                            .padding(.horizontal, 8)
                            .padding(.vertical, 4)
                            .background((isPublic ? Color.taqvoCTA : Color.taqvoAccentText).opacity(0.12))
                            .overlay(
                                RoundedRectangle(cornerRadius: 8)
                                    .stroke(isPublic ? Color.taqvoCTA : Color.taqvoAccentText, lineWidth: 1)
                            )
                            .cornerRadius(8)
                        }
                        Spacer()
                    }
                }
                if let note = activity.note, !note.isEmpty {
                    Text(note)
                        .foregroundColor(.taqvoTextDark)
                        .font(.body)
                        .lineLimit(3)
                }
                Text(activity.endDate.formatted(date: .abbreviated, time: .shortened))
                    .foregroundColor(.taqvoAccentText)
                    .font(.caption)
            }
            .onTapGesture {
                onTapActivity?()
            }

            HStack(spacing: 16) {
                Button {
                    store.toggleLike(activityID: activity.id)
                } label: {
                    HStack(spacing: 6) {
                        Image(systemName: isLikedByCurrentUser ? "heart.fill" : "heart")
                        Text("\(activity.likeCount)")
                    }
                }
                .buttonStyle(.plain)
                .foregroundColor(isLikedByCurrentUser ? .taqvoCTA : .taqvoTextDark)

                Button {
                    showCommentsBottomSheet = true
                } label: {
                    HStack(spacing: 6) {
                        Image(systemName: "bubble.right")
                        Text("\(activity.comments.count)")
                    }
                }
                .buttonStyle(.plain)
                .foregroundColor(.taqvoTextDark)

                ShareLink(item: compositeShareImageURL()) {
                    Image(systemName: "square.and.arrow.up")
                }
                .tint(.taqvoCTA)
            }
        }
        .padding(.vertical, 8)
        .sheet(isPresented: $showCommentsBottomSheet) {
            CommentsBottomSheet(isPresented: $showCommentsBottomSheet, activity: activity)
                .environmentObject(store)
        }
    }
}

struct CommunityView: View {
    @EnvironmentObject var store: ActivityStore
    @EnvironmentObject var community: CommunityViewModel
    @EnvironmentObject var appState: AppState
    @State private var showingCreateSheet = false
    @State private var showingCreateClubSheet = false
    @State private var selectedTab: CommunityTab = .challenges
    
    enum CommunityTab: String, CaseIterable {
        case challenges = "Challenges"
        case leaderboard = "Leaderboard"
        case clubs = "Clubs"
    }
    
    // MARK: - Modern UI Views
    
    private var emptyStateView: some View {
        VStack(spacing: 20) {
            Image(systemName: "figure.2.and.child.holdinghands")
                .font(.system(size: 80))
                .foregroundColor(.taqvoCTA.opacity(0.6))
            
            Text("No Challenges Yet")
                .font(.system(size: 24, weight: .semibold))
                .foregroundColor(.taqvoTextDark)
            
            Text("Create or join a challenge to compete\nwith the community!")
                .font(.system(size: 15))
                .foregroundColor(.taqvoAccentText)
                .multilineTextAlignment(.center)
                .padding(.horizontal, 40)
            
            Button {
                community.load()
                community.refreshProgress(from: store)
            } label: {
                HStack(spacing: 8) {
                    Image(systemName: "arrow.clockwise")
                    Text("Reload")
                }
                .font(.system(size: 16, weight: .medium))
                .foregroundColor(.taqvoCTA)
                .padding(.horizontal, 24)
                .padding(.vertical, 12)
                .background(Color.taqvoCTA.opacity(0.1))
                .cornerRadius(20)
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
    
    private var modernCommunityView: some View {
        VStack(spacing: 0) {
            // Tab Selector
            HStack(spacing: 0) {
                ForEach(CommunityTab.allCases, id: \.self) { tab in
                    Button {
                        withAnimation(.spring(response: 0.3)) {
                            selectedTab = tab
                        }
                    } label: {
                        VStack(spacing: 8) {
                            Text(tab.rawValue)
                                .font(.system(size: 16, weight: selectedTab == tab ? .semibold : .regular))
                                .foregroundColor(selectedTab == tab ? .taqvoTextDark : .taqvoAccentText)
                            
                            Rectangle()
                                .fill(selectedTab == tab ? Color.taqvoCTA : Color.clear)
                                .frame(height: 3)
                        }
                        .frame(maxWidth: .infinity)
                    }
                }
            }
            .padding(.horizontal, 16)
            .padding(.top, 8)
            
            // Content
            ScrollView {
                VStack(spacing: 16) {
                    switch selectedTab {
                    case .challenges:
                        challengesContent
                    case .leaderboard:
                        leaderboardContent
                    case .clubs:
                        clubsContent
                    }
                }
                .padding(.vertical, 16)
            }
        }
    }
    
    private var challengesContent: some View {
        VStack(spacing: 16) {
            ForEach(community.challenges) { challenge in
                NavigationLink(destination: ChallengeDetailView(challenge: challenge)) {
                    modernChallengeCard(challenge: challenge)
                }
                .buttonStyle(.plain)
            }
        }
        .padding(.horizontal, 16)
    }
    
    private func modernChallengeCard(challenge: Challenge) -> some View {
        VStack(alignment: .leading, spacing: 16) {
            // Header
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text(challenge.title)
                        .font(.system(size: 20, weight: .bold))
                        .foregroundColor(.taqvoTextDark)
                    
                    Text(challenge.detail)
                        .font(.system(size: 14))
                        .foregroundColor(.taqvoAccentText)
                        .lineLimit(2)
                }
                
                Spacer()
                
                Image(systemName: "flag.fill")
                    .font(.system(size: 24))
                    .foregroundColor(.taqvoCTA)
            }
            
            // Progress
            VStack(alignment: .leading, spacing: 8) {
                HStack {
                    Text("Goal: \(String(format: "%.0f km", challenge.goalDistanceMeters/1000.0))")
                        .font(.system(size: 13, weight: .medium))
                        .foregroundColor(.taqvoAccentText)
                    
                    Spacer()
                    
                    Text("\(Int(challenge.progressFraction * 100))%")
                        .font(.system(size: 13, weight: .bold))
                        .foregroundColor(.taqvoCTA)
                }
                
                GeometryReader { geometry in
                    ZStack(alignment: .leading) {
                        Rectangle()
                            .fill(Color.gray.opacity(0.2))
                            .frame(height: 8)
                            .cornerRadius(4)
                        
                        Rectangle()
                            .fill(Color.taqvoCTA)
                            .frame(width: geometry.size.width * CGFloat(challenge.progressFraction), height: 8)
                            .cornerRadius(4)
                    }
                }
                .frame(height: 8)
            }
            
            // Join/Leave Button
            Button {
                community.toggleJoin(challengeID: challenge.id)
                community.refreshProgress(from: store)
                if community.challenges.first(where: { $0.id == challenge.id })?.isJoined == true {
                    appState.activityIntent = .run
                    appState.goalIntentType = .distance
                    appState.goalIntentMeters = 5000
                    appState.linkedChallengeTitle = challenge.title
                    appState.linkedChallengeIsPublic = challenge.isPublic
                    appState.navigateToActivity = true
                }
            } label: {
                Text(challenge.isJoined ? "Leave Challenge" : "Join Challenge")
                    .font(.system(size: 16, weight: .semibold))
                    .foregroundColor(challenge.isJoined ? .red : .black)
                    .frame(maxWidth: .infinity)
                    .frame(height: 44)
                    .background(challenge.isJoined ? Color.red.opacity(0.1) : Color.taqvoCTA)
                    .cornerRadius(22)
            }
        }
        .padding(20)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    private var leaderboardContent: some View {
        VStack(spacing: 16) {
            // Sort Picker
            Picker("Sort", selection: $community.leaderboardSort) {
                Text("Distance").tag(LeaderboardSort.distance)
                Text("Pace").tag(LeaderboardSort.pace)
                Text("Streak").tag(LeaderboardSort.streak)
            }
            .pickerStyle(.segmented)
            .padding(.horizontal, 16)
            .onChange(of: community.leaderboardSort) { sort in
                community.setLeaderboardSort(sort)
            }
            
            // Leaderboard Cards
            VStack(spacing: 12) {
                ForEach(community.leaderboard) { entry in
                    leaderboardCard(entry: entry)
                }
            }
            .padding(.horizontal, 16)
        }
    }
    
    private func leaderboardCard(entry: LeaderboardEntry) -> some View {
        HStack(spacing: 16) {
            // Rank Badge
            ZStack {
                Circle()
                    .fill(entry.rank <= 3 ? Color.taqvoCTA.opacity(0.2) : Color.gray.opacity(0.2))
                    .frame(width: 44, height: 44)
                
                Text("#\(entry.rank)")
                    .font(.system(size: 16, weight: .bold))
                    .foregroundColor(entry.rank <= 3 ? .taqvoCTA : .taqvoAccentText)
            }
            
            // User Info
            VStack(alignment: .leading, spacing: 4) {
                Text(entry.userName)
                    .font(.system(size: 16, weight: .semibold))
                    .foregroundColor(.taqvoTextDark)
                
                HStack(spacing: 8) {
                    if let dur = entry.totalDurationSeconds {
                        let paceStr = ActivityTrackingViewModel.formattedPace(distanceMeters: entry.totalDistanceMeters, durationSeconds: dur)
                        Text(paceStr)
                            .font(.system(size: 12))
                            .foregroundColor(.taqvoAccentText)
                    }
                    if let streak = entry.currentStreakDays, streak > 0 {
                        Text("• \(streak)d streak")
                            .font(.system(size: 12))
                            .foregroundColor(.taqvoAccentText)
                    }
                }
            }
            
            Spacer()
            
            // Distance
            Text(String(format: "%.1f km", entry.totalDistanceMeters/1000.0))
                .font(.system(size: 18, weight: .bold))
                .foregroundColor(.taqvoCTA)
        }
        .padding(16)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    private var clubsContent: some View {
        VStack(spacing: 16) {
            if community.clubs.isEmpty {
                VStack(spacing: 16) {
                    Text("No clubs yet")
                        .font(.system(size: 16))
                        .foregroundColor(.taqvoAccentText)
                    
                    Button {
                        showingCreateClubSheet = true
                    } label: {
                        HStack(spacing: 8) {
                            Image(systemName: "plus.circle.fill")
                            Text("Create First Club")
                        }
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(.black)
                        .padding(.horizontal, 24)
                        .padding(.vertical, 12)
                        .background(Color.taqvoCTA)
                        .cornerRadius(20)
                    }
                }
                .frame(maxWidth: .infinity)
                .padding(.vertical, 40)
            } else {
                ForEach(community.clubs) { club in
                    clubCard(club: club)
                }
            }
        }
        .padding(.horizontal, 16)
    }
    
    private func clubCard(club: Club) -> some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text(club.name)
                        .font(.system(size: 18, weight: .bold))
                        .foregroundColor(.taqvoTextDark)
                    
                    Text(club.description)
                        .font(.system(size: 14))
                        .foregroundColor(.taqvoAccentText)
                        .lineLimit(2)
                }
                
                Spacer()
                
                Image(systemName: "person.3.fill")
                    .font(.system(size: 24))
                    .foregroundColor(.taqvoCTA)
            }
            
            Button {
                community.toggleClubJoin(clubID: club.id)
            } label: {
                Text(club.isJoined ? "Leave Club" : "Join Club")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(club.isJoined ? .red : .taqvoCTA)
                    .padding(.horizontal, 20)
                    .padding(.vertical, 8)
                    .background(club.isJoined ? Color.red.opacity(0.1) : Color.taqvoCTA.opacity(0.1))
                    .cornerRadius(16)
            }
        }
        .padding(16)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    var body: some View {
        NavigationStack {
            ZStack {
                Color.taqvoBackgroundDark.ignoresSafeArea()
                
                if community.challenges.isEmpty && community.leaderboard.isEmpty {
                    emptyStateView
                } else {
                    modernCommunityView
                }
            }
            .navigationTitle("COMMUNITY")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    HStack(spacing: 16) {
                        Button {
                            community.load()
                            community.refreshProgress(from: store)
                        } label: {
                            Image(systemName: "arrow.clockwise")
                                .font(.system(size: 20))
                                .foregroundColor(.taqvoTextDark)
                        }
                        Button {
                            showingCreateSheet = true
                        } label: {
                            Image(systemName: "plus.circle.fill")
                                .font(.system(size: 20))
                                .foregroundColor(.taqvoCTA)
                        }
                    }
                }
            }
        }
        .onAppear {
            community.load()
            community.refreshProgress(from: store)
        }
        .sheet(isPresented: $showingCreateSheet) {
            CreateChallengeSheet()
                .environmentObject(community)
                .environmentObject(store)
        }
        .sheet(isPresented: $showingCreateClubSheet) {
            CreateClubSheet()
                .environmentObject(community)
        }
    }
}

struct CreateClubSheet: View {
    @EnvironmentObject var community: CommunityViewModel
    @Environment(\.dismiss) private var dismiss

    @State private var name: String = ""
    @State private var description: String = ""
    @State private var isPublic: Bool = true
    @State private var creating: Bool = false
    @State private var errorMessage: String?

    var body: some View {
        NavigationStack {
            Form {
                Section("Details") {
                    TextField("Name", text: $name)
                    TextField("Description", text: $description, axis: .vertical)
                }
                Section("Visibility") {
                    Toggle("Public", isOn: $isPublic)
                }
                if let msg = errorMessage {
                    Section {
                        Text(msg).foregroundColor(.red)
                    }
                }
            }
            .navigationTitle("Create Club")
            .toolbar {
                ToolbarItem(placement: .confirmationAction) {
                    Button(creating ? "Creating..." : "Create") {
                        Task {
                            creating = true
                            do {
                                try await community.createClub(name: name.trimmingCharacters(in: .whitespacesAndNewlines), description: description.trimmingCharacters(in: .whitespacesAndNewlines), isPublic: isPublic)
                                await MainActor.run { dismiss() }
                            } catch {
                                errorMessage = (error as NSError).localizedDescription
                            }
                            creating = false
                        }
                    }
                    .disabled(name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty || creating)
                }
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") { dismiss() }
                }
            }
        }
    }
}

struct CreateChallengeSheet: View {
    @EnvironmentObject var community: CommunityViewModel
    @EnvironmentObject var store: ActivityStore
    @Environment(\.dismiss) private var dismiss

    @State private var title: String = ""
    @State private var detail: String = ""
    @State private var startDate: Date = Calendar.current.startOfDay(for: Date())
    @State private var endDate: Date = {
        let sd = Calendar.current.startOfDay(for: Date())
        return Calendar.current.date(byAdding: .day, value: 6, to: sd) ?? sd
    }()
    @State private var goalKm: Double = 10
    @State private var isPublic: Bool = true
    @State private var creating: Bool = false
    @State private var errorMessage: String?

    var body: some View {
        ZStack {
            Color.taqvoBackgroundDark.ignoresSafeArea()
            
            VStack(spacing: 0) {
                // Custom Header
                HStack {
                    Button {
                        dismiss()
                    } label: {
                        Text("Cancel")
                            .font(.system(size: 17))
                            .foregroundColor(.taqvoCTA)
                    }
                    
                    Spacer()
                    
                    Button {
                        submit()
                    } label: {
                        Text("Create")
                            .font(.system(size: 17, weight: .semibold))
                            .foregroundColor(isValid && !creating ? .taqvoCTA : .gray)
                    }
                    .disabled(!isValid || creating)
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 16)
                
                // Title
                Text("New Challenge")
                    .font(.system(size: 34, weight: .bold))
                    .foregroundColor(.taqvoTextDark)
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding(.horizontal, 20)
                    .padding(.bottom, 24)
                
                // Content
                ScrollView {
                    VStack(spacing: 24) {
                        // Details Section
                        VStack(alignment: .leading, spacing: 12) {
                            Text("DETAILS")
                                .font(.system(size: 13, weight: .semibold))
                                .foregroundColor(.taqvoAccentText)
                            
                            VStack(spacing: 0) {
                                TextField("Title", text: $title)
                                    .font(.system(size: 17))
                                    .foregroundColor(.taqvoTextDark)
                                    .padding(16)
                                    .background(Color.black.opacity(0.2))
                                
                                Divider()
                                    .background(Color.gray.opacity(0.3))
                                
                                TextField("Description", text: $detail, axis: .vertical)
                                    .font(.system(size: 17))
                                    .foregroundColor(.taqvoTextDark)
                                    .padding(16)
                                    .background(Color.black.opacity(0.2))
                                    .lineLimit(3...6)
                            }
                            .cornerRadius(12)
                        }
                        
                        // Schedule Section
                        VStack(alignment: .leading, spacing: 12) {
                            Text("SCHEDULE")
                                .font(.system(size: 13, weight: .semibold))
                                .foregroundColor(.taqvoAccentText)
                            
                            VStack(spacing: 0) {
                                HStack {
                                    Text("Start")
                                        .font(.system(size: 17))
                                        .foregroundColor(.taqvoTextDark)
                                    Spacer()
                                    DatePicker("", selection: $startDate, displayedComponents: .date)
                                        .labelsHidden()
                                        .colorScheme(.dark)
                                }
                                .padding(16)
                                .background(Color.black.opacity(0.2))
                                
                                Divider()
                                    .background(Color.gray.opacity(0.3))
                                
                                HStack {
                                    Text("End")
                                        .font(.system(size: 17))
                                        .foregroundColor(.taqvoTextDark)
                                    Spacer()
                                    DatePicker("", selection: $endDate, in: startDate...Date.distantFuture, displayedComponents: .date)
                                        .labelsHidden()
                                        .colorScheme(.dark)
                                }
                                .padding(16)
                                .background(Color.black.opacity(0.2))
                            }
                            .cornerRadius(12)
                        }
                        
                        // Goal Section
                        VStack(alignment: .leading, spacing: 12) {
                            Text("GOAL")
                                .font(.system(size: 13, weight: .semibold))
                                .foregroundColor(.taqvoAccentText)
                            
                            HStack {
                                Text("Goal: \(Int(goalKm)) km")
                                    .font(.system(size: 17))
                                    .foregroundColor(.taqvoTextDark)
                                
                                Spacer()
                                
                                HStack(spacing: 16) {
                                    Button {
                                        if goalKm > 1 {
                                            goalKm -= 1
                                        }
                                    } label: {
                                        Image(systemName: "minus")
                                            .font(.system(size: 20, weight: .medium))
                                            .foregroundColor(.taqvoTextDark)
                                            .frame(width: 44, height: 44)
                                            .background(Color.black.opacity(0.3))
                                            .cornerRadius(22)
                                    }
                                    
                                    Button {
                                        if goalKm < 1000 {
                                            goalKm += 1
                                        }
                                    } label: {
                                        Image(systemName: "plus")
                                            .font(.system(size: 20, weight: .medium))
                                            .foregroundColor(.taqvoTextDark)
                                            .frame(width: 44, height: 44)
                                            .background(Color.black.opacity(0.3))
                                            .cornerRadius(22)
                                    }
                                }
                            }
                            .padding(16)
                            .background(Color.black.opacity(0.2))
                            .cornerRadius(12)
                        }
                        
                        // Visibility Section
                        VStack(alignment: .leading, spacing: 12) {
                            Text("VISIBILITY")
                                .font(.system(size: 13, weight: .semibold))
                                .foregroundColor(.taqvoAccentText)
                            
                            HStack {
                                Text("Public challenge")
                                    .font(.system(size: 17))
                                    .foregroundColor(.taqvoTextDark)
                                
                                Spacer()
                                
                                Toggle("", isOn: $isPublic)
                                    .labelsHidden()
                                    .tint(.taqvoCTA)
                            }
                            .padding(16)
                            .background(Color.black.opacity(0.2))
                            .cornerRadius(12)
                        }
                        
                        // Error Message
                        if let msg = errorMessage {
                            Text(msg)
                                .font(.system(size: 14))
                                .foregroundColor(.red)
                                .padding(16)
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .background(Color.red.opacity(0.1))
                                .cornerRadius(12)
                        }
                    }
                    .padding(.horizontal, 20)
                    .padding(.bottom, 40)
                }
            }
        }
    }

    private var isValid: Bool {
        !title.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty && endDate >= startDate && goalKm > 0
    }

    private func submit() {
        creating = true
        errorMessage = nil
        Task {
            do {
                try await community.createChallenge(
                    title: title.trimmingCharacters(in: .whitespacesAndNewlines),
                    detail: detail.trimmingCharacters(in: .whitespacesAndNewlines),
                    startDate: Calendar.current.startOfDay(for: startDate),
                    endDate: Calendar.current.startOfDay(for: endDate),
                    goalDistanceMeters: goalKm * 1000.0,
                    isPublic: isPublic,
                    autoJoin: true
                )
                await MainActor.run {
                    community.refreshProgress(from: store)
                    dismiss()
                }
            } catch {
                await MainActor.run {
                    errorMessage = error.localizedDescription
                }
            }
            creating = false
        }
    }
}

struct InsightsView: View {
    @EnvironmentObject var store: ActivityStore
    @EnvironmentObject var community: CommunityViewModel
    @State private var period: Period = .weekly

    enum Period: String, CaseIterable { case daily, weekly, monthly }

    private func km(_ meters: Double) -> String {
        String(format: "%.2f km", meters/1000.0)
    }

    private func paceMinPerKm(distanceMeters: Double, durationSeconds: Double) -> Double {
        guard distanceMeters > 1, durationSeconds > 0 else { return 0 }
        let secPerKm = durationSeconds / (distanceMeters / 1000.0)
        return secPerKm / 60.0
    }

    private func exportInsightsCSV(period: Period, weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> URL {
        var rows: [String] = ["date,total_km,total_seconds,total_calories_kcal,avg_pace_min_per_km,avg_intensity_kcal_per_min,longest_run_km,longest_run_seconds,run_count"]
        let df = ISO8601DateFormatter()
        switch period {
        case .weekly:
            for w in weekly {
                let avg = paceMinPerKm(distanceMeters: w.totalDistanceMeters, durationSeconds: w.totalDurationSeconds)
                let intensity = w.totalDurationSeconds > 0 ? w.totalCaloriesKilocalories / (w.totalDurationSeconds / 60.0) : 0
                let totalKm = String(format: "%.2f", w.totalDistanceMeters/1000.0)
                let totalCal = String(format: "%.0f", w.totalCaloriesKilocalories)
                let avgStr = String(format: "%.2f", avg)
                let intensityStr = String(format: "%.2f", intensity)
                let longestKm = String(format: "%.2f", w.longestRunMeters/1000.0)
                rows.append("\(df.string(from: w.weekStart)),\(totalKm),\(Int(w.totalDurationSeconds)),\(totalCal),\(avgStr),\(intensityStr),\(longestKm),\(Int(w.longestRunDurationSeconds)),\(0)")
            }
        case .daily:
            for d in daily {
                let avg = paceMinPerKm(distanceMeters: d.totalDistanceMeters, durationSeconds: d.totalDurationSeconds)
                let intensity = d.totalDurationSeconds > 0 ? d.totalCaloriesKilocalories / (d.totalDurationSeconds / 60.0) : 0
                let totalKm = String(format: "%.2f", d.totalDistanceMeters/1000.0)
                let totalCal = String(format: "%.0f", d.totalCaloriesKilocalories)
                let avgStr = String(format: "%.2f", avg)
                let intensityStr = String(format: "%.2f", intensity)
                let longestKm = String(format: "%.2f", d.longestRunMeters/1000.0)
                rows.append("\(df.string(from: d.dayStart)),\(totalKm),\(Int(d.totalDurationSeconds)),\(totalCal),\(avgStr),\(intensityStr),\(longestKm),\(Int(d.longestRunDurationSeconds)),\(d.runCount)")
            }
        case .monthly:
            for m in monthly {
                let avg = paceMinPerKm(distanceMeters: m.totalDistanceMeters, durationSeconds: m.totalDurationSeconds)
                let intensity = m.totalDurationSeconds > 0 ? m.totalCaloriesKilocalories / (m.totalDurationSeconds / 60.0) : 0
                let totalKm = String(format: "%.2f", m.totalDistanceMeters/1000.0)
                let totalCal = String(format: "%.0f", m.totalCaloriesKilocalories)
                let avgStr = String(format: "%.2f", avg)
                let intensityStr = String(format: "%.2f", intensity)
                let longestKm = String(format: "%.2f", m.longestRunMeters/1000.0)
                rows.append("\(df.string(from: m.monthStart)),\(totalKm),\(Int(m.totalDurationSeconds)),\(totalCal),\(avgStr),\(intensityStr),\(longestKm),\(Int(m.longestRunDurationSeconds)),\(m.runCount)")
            }
        }
        let csv = rows.joined(separator: "\n")
        let filename = "taqvo-insights-\(period.rawValue)-\(Int(Date().timeIntervalSince1970)).csv"
        let url = FileManager.default.temporaryDirectory.appendingPathComponent(filename)
        try? csv.data(using: .utf8)?.write(to: url)
        return url
    }

    @ViewBuilder
    private func distanceChart(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            if weekly.isEmpty { EmptyView() } else {
                Chart(weekly) { w in
                    BarMark(
                        x: .value("Week", w.weekStart),
                        y: .value("Km", w.totalDistanceMeters / 1000.0)
                    )
                    .foregroundStyle(Color.taqvoCTA)
                }
                .chartXAxis(.hidden)
                .chartYAxis { AxisMarks(position: .leading) }
                .frame(height: 180)
            }
        case .daily:
            if daily.isEmpty { EmptyView() } else {
                Chart(daily) { d in
                    BarMark(
                        x: .value("Day", d.dayStart),
                        y: .value("Km", d.totalDistanceMeters / 1000.0)
                    )
                    .foregroundStyle(Color.taqvoCTA)
                }
                .chartXAxis(.hidden)
                .chartYAxis { AxisMarks(position: .leading) }
                .frame(height: 180)
            }
        case .monthly:
            if monthly.isEmpty { EmptyView() } else {
                Chart(monthly) { m in
                    BarMark(
                        x: .value("Month", m.monthStart),
                        y: .value("Km", m.totalDistanceMeters / 1000.0)
                    )
                    .foregroundStyle(Color.taqvoCTA)
                }
                .chartXAxis(.hidden)
                .chartYAxis { AxisMarks(position: .leading) }
                .frame(height: 180)
            }
        }
    }

    @ViewBuilder
    private func paceChart(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            Chart(weekly) { w in
                LineMark(
                    x: .value("Week", w.weekStart),
                    y: .value("min/km", paceMinPerKm(distanceMeters: w.totalDistanceMeters, durationSeconds: w.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .daily:
            Chart(daily) { d in
                LineMark(
                    x: .value("Day", d.dayStart),
                    y: .value("min/km", paceMinPerKm(distanceMeters: d.totalDistanceMeters, durationSeconds: d.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .monthly:
            Chart(monthly) { m in
                LineMark(
                    x: .value("Month", m.monthStart),
                    y: .value("min/km", paceMinPerKm(distanceMeters: m.totalDistanceMeters, durationSeconds: m.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        }
    }

    @ViewBuilder
    private func caloriesChart(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            Chart(weekly) { w in
                BarMark(
                    x: .value("Week", w.weekStart),
                    y: .value("kcal", w.totalCaloriesKilocalories)
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .daily:
            Chart(daily) { d in
                BarMark(
                    x: .value("Day", d.dayStart),
                    y: .value("kcal", d.totalCaloriesKilocalories)
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .monthly:
            Chart(monthly) { m in
                BarMark(
                    x: .value("Month", m.monthStart),
                    y: .value("kcal", m.totalCaloriesKilocalories)
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        }
    }

    private func intensityKcalPerMin(calories: Double, seconds: Double) -> Double {
        seconds > 0 ? calories / (seconds / 60.0) : 0
    }

    @ViewBuilder
    private func intensityChart(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            Chart(weekly) { w in
                LineMark(
                    x: .value("Week", w.weekStart),
                    y: .value("kcal/min", intensityKcalPerMin(calories: w.totalCaloriesKilocalories, seconds: w.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .daily:
            Chart(daily) { d in
                LineMark(
                    x: .value("Day", d.dayStart),
                    y: .value("kcal/min", intensityKcalPerMin(calories: d.totalCaloriesKilocalories, seconds: d.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .monthly:
            Chart(monthly) { m in
                LineMark(
                    x: .value("Month", m.monthStart),
                    y: .value("kcal/min", intensityKcalPerMin(calories: m.totalCaloriesKilocalories, seconds: m.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        }
    }

    // MARK: - Insights Helpers
    private func daysWithActivitySet(using calendar: Calendar = Calendar(identifier: .iso8601)) -> Set<Date> {
        Set(store.activities.map { calendar.startOfDay(for: $0.endDate) })
    }

    private func bestDaysStreak(using calendar: Calendar = Calendar(identifier: .iso8601)) -> Int {
        let days = store.activities.map { calendar.startOfDay(for: $0.endDate) }.sorted()
        guard !days.isEmpty else { return 0 }
        var best = 1
        var current = 1
        for i in 1..<days.count {
            if let prev = calendar.date(byAdding: .day, value: 1, to: days[i-1]), prev == days[i] {
                current += 1
                best = max(best, current)
            } else if days[i] != days[i-1] { // reset on gap, but skip duplicates
                current = 1
            }
        }
        return best
    }

    @ViewBuilder
    private func recentStreakRow() -> some View {
        let cal = Calendar(identifier: .iso8601)
        let today = cal.startOfDay(for: Date())
        let set = daysWithActivitySet(using: cal)
        HStack(spacing: 8) {
            ForEach(0..<14) { i in
                let day = cal.date(byAdding: .day, value: -i, to: today) ?? today
                let active = set.contains(day)
                Circle()
                    .fill(active ? Color.taqvoCTA : Color.black.opacity(0.15))
                    .frame(width: 12, height: 12)
            }
        }
    }

    @ViewBuilder
    private func milestoneChip(title: String, achieved: Bool) -> some View {
        HStack(spacing: 6) {
            Image(systemName: achieved ? "checkmark.seal.fill" : "lock")
                .foregroundColor(achieved ? .taqvoCTA : .taqvoAccentText)
            Text(title)
                .font(.caption)
                .foregroundColor(.taqvoTextDark)
        }
        .padding(.horizontal, 10)
        .padding(.vertical, 6)
        .background(Color.black.opacity(0.08))
        .clipShape(RoundedRectangle(cornerRadius: 12))
    }

    @ViewBuilder
    private func milestonesView() -> some View {
        let totalDistance = store.activities.reduce(0.0) { $0 + $1.distanceMeters }
        let longestRun = store.activities.map { $0.distanceMeters }.max() ?? 0
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Text("Milestones")
                    .font(.caption)
                    .foregroundColor(.taqvoAccentText)
                Spacer()
            }
            // Distance milestones (single-activity)
            HStack(spacing: 8) {
                milestoneChip(title: "5K", achieved: longestRun >= 5_000)
                milestoneChip(title: "10K", achieved: longestRun >= 10_000)
                milestoneChip(title: "Half (21K)", achieved: longestRun >= 21_097)
                milestoneChip(title: "Marathon (42K)", achieved: longestRun >= 42_195)
            }
            // Total distance milestones (all-time)
            HStack(spacing: 8) {
                milestoneChip(title: "100K total", achieved: totalDistance >= 100_000)
                milestoneChip(title: "250K total", achieved: totalDistance >= 250_000)
                milestoneChip(title: "500K total", achieved: totalDistance >= 500_000)
            }
        }
    }

    @ViewBuilder
    private func weeklyComparisonView(weekly: [WeeklySummary]) -> some View {
        let cal = Calendar(identifier: .iso8601)
        if weekly.count < 2 {
            HStack {
                Text("Compare Weeks")
                    .font(.caption)
                    .foregroundColor(.taqvoAccentText)
                Spacer()
                Text("Not enough data")
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
            }
        } else {
            let cur = weekly[0]
            let prev = weekly[1]
            let distDelta = cur.totalDistanceMeters - prev.totalDistanceMeters
            let distPct = prev.totalDistanceMeters > 0 ? (distDelta / prev.totalDistanceMeters) * 100.0 : 0
            let durDelta = cur.totalDurationSeconds - prev.totalDurationSeconds
            let paceCur = paceMinPerKm(distanceMeters: cur.totalDistanceMeters, durationSeconds: cur.totalDurationSeconds)
            let pacePrev = paceMinPerKm(distanceMeters: prev.totalDistanceMeters, durationSeconds: prev.totalDurationSeconds)
            let paceDelta = paceCur - pacePrev // negative is improvement
            let weekComps = cal.dateComponents([.yearForWeekOfYear, .weekOfYear], from: cur.weekStart)
            let runCountCur = store.activities.filter { cal.dateComponents([.yearForWeekOfYear, .weekOfYear], from: $0.endDate) == weekComps }.count
            let prevComps = cal.dateComponents([.yearForWeekOfYear, .weekOfYear], from: prev.weekStart)
            let runCountPrev = store.activities.filter { cal.dateComponents([.yearForWeekOfYear, .weekOfYear], from: $0.endDate) == prevComps }.count
            let runDelta = runCountCur - runCountPrev

            VStack(spacing: 8) {
                HStack {
                    Text("Compare Weeks")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Spacer()
                }
                HStack {
                    VStack(alignment: .leading) {
                        Text("Distance")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Text(String(format: "%+.2f km (%+.0f%%)", distDelta/1000.0, distPct))
                            .font(.headline)
                            .foregroundColor(.taqvoTextDark)
                    }
                    Spacer()
                    VStack(alignment: .trailing) {
                        Text("Duration")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Text(String(format: "%+d min", Int(durDelta/60.0)))
                            .font(.headline)
                            .foregroundColor(.taqvoTextDark)
                    }
                }
                HStack {
                    VStack(alignment: .leading) {
                        Text("Pace")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Text(String(format: "%+.2f min/km", paceDelta))
                            .font(.headline)
                            .foregroundColor(paceDelta < 0 ? .green : .red)
                    }
                    Spacer()
                    VStack(alignment: .trailing) {
                        Text("Runs")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Text(String(format: "%+d", runDelta))
                            .font(.headline)
                            .foregroundColor(.taqvoTextDark)
                    }
                }
            }
        }
    }

    // MARK: - Modern UI Components
    
    private var emptyInsightsView: some View {
        VStack(spacing: 20) {
            Image(systemName: "chart.xyaxis.line")
                .font(.system(size: 80))
                .foregroundColor(.taqvoCTA.opacity(0.6))
            
            Text("No Insights Yet")
                .font(.system(size: 24, weight: .semibold))
                .foregroundColor(.taqvoTextDark)
            
            Text("Complete your first activity to start\ntracking your progress!")
                .font(.system(size: 15))
                .foregroundColor(.taqvoAccentText)
                .multilineTextAlignment(.center)
                .padding(.horizontal, 40)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
    
    private var statsOverviewSection: some View {
        VStack(spacing: 12) {
            HStack(spacing: 12) {
                statCard(
                    title: "Current Streak",
                    value: "\(store.activeDaysStreak())",
                    unit: "days",
                    icon: "flame.fill",
                    color: .orange
                )
                
                statCard(
                    title: "Best Streak",
                    value: "\(bestDaysStreak())",
                    unit: "days",
                    icon: "trophy.fill",
                    color: .taqvoCTA
                )
            }
            
            HStack(spacing: 12) {
                statCard(
                    title: "Total Activities",
                    value: "\(store.activities.count)",
                    unit: "",
                    icon: "figure.run",
                    color: .blue
                )
                
                statCard(
                    title: "Total Distance",
                    value: String(format: "%.0f", store.activities.reduce(0.0) { $0 + $1.distanceMeters } / 1000.0),
                    unit: "km",
                    icon: "location.fill",
                    color: .purple
                )
            }
            
            // Streak visualization
            VStack(alignment: .leading, spacing: 8) {
                Text("Last 14 Days")
                    .font(.system(size: 13, weight: .medium))
                    .foregroundColor(.taqvoAccentText)
                    .padding(.horizontal, 16)
                
                recentStreakRow()
                    .padding(.horizontal, 16)
            }
            .padding(.vertical, 16)
            .background(Color.black.opacity(0.2))
            .cornerRadius(16)
        }
        .padding(.horizontal, 16)
    }
    
    private func statCard(title: String, value: String, unit: String, icon: String, color: Color) -> some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Image(systemName: icon)
                    .font(.system(size: 16))
                    .foregroundColor(color)
                Spacer()
            }
            
            HStack(alignment: .firstTextBaseline, spacing: 4) {
                Text(value)
                    .font(.system(size: 28, weight: .bold))
                    .foregroundColor(.taqvoTextDark)
                if !unit.isEmpty {
                    Text(unit)
                        .font(.system(size: 14))
                        .foregroundColor(.taqvoAccentText)
                }
            }
            
            Text(title)
                .font(.system(size: 12))
                .foregroundColor(.taqvoAccentText)
        }
        .padding(16)
        .frame(maxWidth: .infinity, alignment: .leading)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    private func chartCard<Content: View>(title: String, icon: String, @ViewBuilder content: () -> Content) -> some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Image(systemName: icon)
                    .font(.system(size: 16))
                    .foregroundColor(.taqvoCTA)
                Text(title)
                    .font(.system(size: 17, weight: .semibold))
                    .foregroundColor(.taqvoTextDark)
                Spacer()
            }
            .padding(.horizontal, 16)
            .padding(.top, 16)
            
            content()
                .padding(.horizontal, 16)
                .padding(.bottom, 16)
        }
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    private func modernMilestonesView() -> some View {
        let totalDistance = store.activities.reduce(0.0) { $0 + $1.distanceMeters }
        let longestRun = store.activities.map { $0.distanceMeters }.max() ?? 0
        
        return VStack(alignment: .leading, spacing: 16) {
            HStack {
                Image(systemName: "star.fill")
                    .font(.system(size: 16))
                    .foregroundColor(.taqvoCTA)
                Text("Milestones")
                    .font(.system(size: 17, weight: .semibold))
                    .foregroundColor(.taqvoTextDark)
                Spacer()
            }
            
            VStack(spacing: 12) {
                Text("Single Activity")
                    .font(.system(size: 13, weight: .medium))
                    .foregroundColor(.taqvoAccentText)
                    .frame(maxWidth: .infinity, alignment: .leading)
                
                HStack(spacing: 8) {
                    modernMilestoneChip(title: "5K", achieved: longestRun >= 5_000)
                    modernMilestoneChip(title: "10K", achieved: longestRun >= 10_000)
                    modernMilestoneChip(title: "Half", achieved: longestRun >= 21_097)
                    modernMilestoneChip(title: "Marathon", achieved: longestRun >= 42_195)
                }
                
                Text("Total Distance")
                    .font(.system(size: 13, weight: .medium))
                    .foregroundColor(.taqvoAccentText)
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding(.top, 8)
                
                HStack(spacing: 8) {
                    modernMilestoneChip(title: "100K", achieved: totalDistance >= 100_000)
                    modernMilestoneChip(title: "250K", achieved: totalDistance >= 250_000)
                    modernMilestoneChip(title: "500K", achieved: totalDistance >= 500_000)
                    modernMilestoneChip(title: "1000K", achieved: totalDistance >= 1_000_000)
                }
            }
        }
        .padding(16)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    private func modernMilestoneChip(title: String, achieved: Bool) -> some View {
        VStack(spacing: 6) {
            Image(systemName: achieved ? "checkmark.circle.fill" : "circle")
                .font(.system(size: 24))
                .foregroundColor(achieved ? .taqvoCTA : .gray.opacity(0.3))
            
            Text(title)
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(achieved ? .taqvoTextDark : .taqvoAccentText)
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 12)
        .background(achieved ? Color.taqvoCTA.opacity(0.1) : Color.black.opacity(0.1))
        .cornerRadius(12)
    }
    
    @ViewBuilder
    private func summaryList(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            VStack(spacing: 12) {
                ForEach(weekly) { w in
                    WeeklySummaryCard(summary: w)
                }
            }
        case .daily:
            VStack(spacing: 12) {
                ForEach(daily) { d in
                    DailySummaryCard(summary: d)
                }
            }
        case .monthly:
            VStack(spacing: 12) {
                ForEach(monthly) { m in
                    MonthlySummaryCard(summary: m)
                }
            }
        }
    }

    var body: some View {
        NavigationStack {
            ZStack {
                Color.taqvoBackgroundDark.ignoresSafeArea()
                
                let weekly: [WeeklySummary] = store.weeklySummaries()
                let daily: [DailySummary] = store.dailySummaries()
                let monthly: [MonthlySummary] = store.monthlySummaries()
                let allEmpty = weekly.isEmpty && daily.isEmpty && monthly.isEmpty

                if allEmpty {
                    emptyInsightsView
                } else {
                    ScrollView {
                        VStack(spacing: 20) {
                            // Stats Overview Cards
                            statsOverviewSection
                            
                            // Period Selector
                            Picker("Period", selection: $period) {
                                Text("Daily").tag(Period.daily)
                                Text("Weekly").tag(Period.weekly)
                                Text("Monthly").tag(Period.monthly)
                            }
                            .pickerStyle(.segmented)
                            .padding(.horizontal, 16)

                            // Charts Section
                            VStack(spacing: 16) {
                                chartCard(title: "Distance", icon: "location.fill") {
                                    distanceChart(weekly: weekly, daily: daily, monthly: monthly)
                                }
                                
                                chartCard(title: "Pace", icon: "speedometer") {
                                    paceChart(weekly: weekly, daily: daily, monthly: monthly)
                                }
                                
                                chartCard(title: "Calories", icon: "flame.fill") {
                                    caloriesChart(weekly: weekly, daily: daily, monthly: monthly)
                                }
                            }
                            .padding(.horizontal, 16)

                            // Milestones
                            modernMilestonesView()
                                .padding(.horizontal, 16)

                            // Summary List
                            summaryList(weekly: weekly, daily: daily, monthly: monthly)
                                .padding(.horizontal, 16)
                        }
                        .padding(.vertical, 16)
                    }
                }
            }
            .navigationTitle("INSIGHTS")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                let weekly = store.weeklySummaries()
                let daily = store.dailySummaries()
                let monthly = store.monthlySummaries()
                ToolbarItem(placement: .navigationBarTrailing) {
                    HStack(spacing: 16) {
                        Button {
                            community.refreshProgress(from: store)
                        } label: {
                            Image(systemName: "arrow.triangle.2.circlepath")
                                .font(.system(size: 20))
                                .foregroundColor(.taqvoTextDark)
                        }
                        ShareLink(item: exportInsightsCSV(period: period, weekly: weekly, daily: daily, monthly: monthly)) {
                            Image(systemName: "square.and.arrow.up")
                                .font(.system(size: 20))
                                .foregroundColor(.taqvoTextDark)
                        }
                    }
                }
            }
        }
    }
}

struct WeeklyBarChart: View {
    let weeks: [WeeklySummary]

    private var maxDistance: Double {
        weeks.map { $0.totalDistanceMeters }.max() ?? 1
    }

    var body: some View {
        GeometryReader { geo in
            HStack(alignment: .bottom, spacing: 8) {
                ForEach(weeks, id: \.id) { w in
                    let ratio = CGFloat(w.totalDistanceMeters / maxDistance)
                    VStack {
                        RoundedRectangle(cornerRadius: 6)
                            .fill(Color.taqvoCTA)
                            .frame(width: (geo.size.width - 8 * CGFloat(weeks.count - 1)) / CGFloat(weeks.count), height: max(12, geo.size.height * ratio))
                        Text(String(format: "%.0f km", w.totalDistanceMeters/1000.0))
                            .font(.caption2)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                        Text(w.weekStart.formatted(.dateTime.month().day()))
                            .font(.caption2)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                    }
                }
            }
        }
    }
}

struct WeeklySummaryCard: View {
    let summary: WeeklySummary

    private var rangeText: String {
        let cal = Calendar(identifier: .iso8601)
        let end = cal.date(byAdding: .day, value: 6, to: summary.weekStart) ?? summary.weekStart
        let startStr = summary.weekStart.formatted(date: .abbreviated, time: .omitted)
        let endStr = end.formatted(date: .abbreviated, time: .omitted)
        return "\(startStr) – \(endStr)"
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text(rangeText)
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
                Spacer()
                Text(summary.averagePaceString)
                    .font(.subheadline)
                    .foregroundColor(.taqvoAccentText)
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Distance")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.2f km", summary.totalDistanceMeters/1000.0))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                VStack(alignment: .trailing) {
                    Text("Total Time")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(ActivityTrackingViewModel.formattedDuration(summary.totalDurationSeconds))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Calories")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.0f kcal", summary.totalCaloriesKilocalories))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                HStack {
                    Text("Longest Run")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Spacer()
                    Text(String(format: "%.2f km", summary.longestRunMeters/1000.0))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                    Text(" • ")
                        .foregroundColor(.taqvoAccentText)
                    Text(ActivityTrackingViewModel.formattedDuration(summary.longestRunDurationSeconds))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                }
            }
        }
        .padding(.vertical, 8)
    }
}

struct DailySummaryCard: View {
    let summary: DailySummary

    private var dayText: String {
        summary.dayStart.formatted(date: .abbreviated, time: .omitted)
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text(dayText)
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
                Spacer()
                Text(summary.averagePaceString)
                    .font(.subheadline)
                    .foregroundColor(.taqvoAccentText)
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Distance")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.2f km", summary.totalDistanceMeters/1000.0))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                VStack(alignment: .trailing) {
                    Text("Total Time")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(ActivityTrackingViewModel.formattedDuration(summary.totalDurationSeconds))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Calories")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.0f kcal", summary.totalCaloriesKilocalories))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                HStack {
                    Text("Runs")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Spacer()
                    Text("\(summary.runCount)")
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                    Text(" • ")
                        .foregroundColor(.taqvoAccentText)
                    Text("Longest: \(String(format: "%.2f km", summary.longestRunMeters/1000.0)) in \(ActivityTrackingViewModel.formattedDuration(summary.longestRunDurationSeconds))")
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                        .lineLimit(1)
                }
            }
        }
        .padding(.vertical, 8)
    }
}

struct MonthlySummaryCard: View {
    let summary: MonthlySummary

    private var monthText: String {
        summary.monthStart.formatted(.dateTime.month().year())
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text(monthText)
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
                Spacer()
                Text(summary.averagePaceString)
                    .font(.subheadline)
                    .foregroundColor(.taqvoAccentText)
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Distance")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.2f km", summary.totalDistanceMeters/1000.0))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                VStack(alignment: .trailing) {
                    Text("Total Time")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(ActivityTrackingViewModel.formattedDuration(summary.totalDurationSeconds))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Calories")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.0f kcal", summary.totalCaloriesKilocalories))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                HStack {
                    Text("Runs")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Spacer()
                    Text("\(summary.runCount)")
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                    Text(" • ")
                        .foregroundColor(.taqvoAccentText)
                    Text("Longest: \(String(format: "%.2f km", summary.longestRunMeters/1000.0)) in \(ActivityTrackingViewModel.formattedDuration(summary.longestRunDurationSeconds))")
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                        .lineLimit(1)
                }
            }
        }
        .padding(.vertical, 8)
    }
}

struct ProfileView: View {
    @EnvironmentObject var appState: AppState
    @EnvironmentObject var store: ActivityStore
    @ObservedObject private var supabaseAuth = SupabaseAuthManager.shared
    @StateObject private var profileService = ProfileService.shared
    @StateObject private var permissionsVM = PermissionsViewModel()
    @StateObject private var musicVM = MusicViewModel()
    @StateObject private var spotifyVM = SpotifyViewModel()
    @StateObject private var health = HealthSyncService()
    @AppStorage("preferredMusicProvider") private var providerString: String = MusicProvider.spotify.rawValue
    @AppStorage("autoStopMusicOnEnd") private var autoStopMusicOnEnd: Bool = false
    @AppStorage("appTheme") private var appTheme: String = "system"
    @AppStorage("healthSyncEnabled") private var healthSyncEnabled: Bool = UserDefaults.standard.bool(forKey: "healthSyncEnabled")

    @State private var showSpotifyPicker: Bool = false

    // Profile settings - now using ProfileService

    @State private var profileUsername: String = ""
    @AppStorage("postVisibility") private var postVisibilityRaw: String = PostVisibility.publicFeed.rawValue
    @AppStorage("notifyGoalCompletion") private var notifyGoalCompletion: Bool = true
    @AppStorage("notifyNewFollower") private var notifyNewFollower: Bool = true
    @AppStorage("notifyComments") private var notifyComments: Bool = true
    @AppStorage("notifyWeeklyStats") private var notifyWeeklyStats: Bool = true
    @AppStorage("preferredLanguage") private var preferredLanguageCode: String = "en"

    @State private var selectedPhotoItem: PhotosPickerItem? = nil
    @State private var profileUIImage: UIImage? = nil
    @State private var hasUnsavedChanges: Bool = false
    @State private var showAuthErrorAlert: Bool = false

    enum PostVisibility: String, CaseIterable {
        case publicFeed = "public"
        case friends = "friends"
        case privateOnly = "private"
    }

    private var provider: MusicProvider {
        MusicProvider(rawValue: providerString) ?? .spotify
    }
    
    private var totalActivities: Int {
        store.activities.count
    }
    
    private var totalDistance: Double {
        store.activities.reduce(0) { $0 + $1.distanceMeters }
    }

    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(spacing: 24) {
                    // Profile Header
                    profileHeaderSection
                    
                    // Stats Cards
                    statsSection
                    
                    // Music Integration
                    musicIntegrationSection
                    
                    // Privacy & Settings
                    privacySettingsSection
                    
                    // Permissions
                    permissionsSection
                    
                    // Preferences
                    preferencesSection
                    
                    // Support
                    supportSection
                    
                    // Sign Out
                    if supabaseAuth.isAuthenticated {
                        Button(action: {
                            SupabaseAuthManager.shared.signOut()
                        }) {
                            HStack {
                                Image(systemName: "rectangle.portrait.and.arrow.right")
                                Text("Sign Out")
                                    .font(.taqvo(.headline))
                            }
                            .foregroundColor(.red)
                            .frame(maxWidth: .infinity)
                            .padding(.vertical, 16)
                            .background(Color.black.opacity(0.2))
                            .cornerRadius(16)
                        }
                        .padding(.horizontal, 20)
                    }
                    
                    Spacer(minLength: 40)
                }
                .padding(.top, 20)
            }
            .background(Color.taqvoBackgroundDark.ignoresSafeArea())
            .navigationTitle("Profile")
            .navigationBarTitleDisplayMode(.large)
            .onAppear {
                appState.locationAuthorized = permissionsVM.locationAuthorizedState
                appState.motionAuthorized = PermissionsViewModel.motionAuthorized()
                appState.healthAuthorized = PermissionsViewModel.healthAuthorized()
                appState.backgroundTrackingEnabled = permissionsVM.alwaysAuthorizedState
                loadProfileData()
            }
            .onReceive(permissionsVM.$locationAuthorizedState) { authorized in
                appState.locationAuthorized = authorized
            }
            .onReceive(permissionsVM.$alwaysAuthorizedState) { authorizedAlways in
                appState.backgroundTrackingEnabled = authorizedAlways
            }
            .onChange(of: selectedPhotoItem) { newItem in
                guard let item = newItem else { return }
                Task {
                    if let data = try? await item.loadTransferable(type: Data.self) {
                        profileUIImage = UIImage(data: data)
                        hasUnsavedChanges = true
                    }
                }
            }
            .onChange(of: profileUsername) { _ in
                hasUnsavedChanges = true
            }
            .sheet(isPresented: $showSpotifyPicker) {
                SpotifyPlaylistPickerView(spotifyVM: spotifyVM)
            }
            .alert(
                "Sign in failed",
                isPresented: $showAuthErrorAlert
            ) {
                Button("OK", role: .cancel) {
                    SupabaseAuthManager.shared.lastAuthError = nil
                }
            } message: {
                Text(supabaseAuth.lastAuthError ?? "")
            }
            .onChange(of: supabaseAuth.lastAuthError) { error in
                showAuthErrorAlert = error != nil
            }
        }
    }
    
    // MARK: - Section Views
    
    private var profileHeaderSection: some View {
        VStack(spacing: 16) {
            PhotosPicker(selection: $selectedPhotoItem, matching: .images) {
                ZStack(alignment: .bottomTrailing) {
                    if let img = profileUIImage {
                        Image(uiImage: img)
                            .resizable()
                            .scaledToFill()
                            .frame(width: 100, height: 100)
                            .clipShape(Circle())
                            .overlay(
                                Circle()
                                    .stroke(Color.taqvoCTA, lineWidth: 3)
                            )
                    } else {
                        Circle()
                            .fill(Color.black.opacity(0.3))
                            .frame(width: 100, height: 100)
                            .overlay(
                                Image(systemName: "person.crop.circle.fill")
                                    .resizable()
                                    .scaledToFit()
                                    .foregroundColor(.taqvoAccentText)
                                    .frame(width: 60, height: 60)
                            )
                    }
                    
                    Circle()
                        .fill(Color.taqvoCTA)
                        .frame(width: 32, height: 32)
                        .overlay(
                            Image(systemName: "camera.fill")
                                .font(.system(size: 14))
                                .foregroundColor(.taqvoTextLight)
                        )
                }
            }
            
            VStack(spacing: 8) {
                TextField("Username", text: $profileUsername)
                    .font(.taqvo(.title))
                    .foregroundColor(.taqvoTextDark)
                    .multilineTextAlignment(.center)
                    .textInputAutocapitalization(.never)
                    .disableAutocorrection(true)
                    .padding(.horizontal, 40)
                
                // Display user email from database
                if let email = supabaseAuth.userEmail {
                    HStack(spacing: 6) {
                        Image(systemName: "envelope.fill")
                            .font(.system(size: 12))
                            .foregroundColor(.taqvoAccentText)
                        Text(email)
                            .font(.system(size: 14))
                            .foregroundColor(.taqvoAccentText)
                    }
                    .padding(.top, 4)
                }
                
                if hasUnsavedChanges {
                    Button(action: {
                        Task {
                            await saveProfileData()
                        }
                    }) {
                        HStack(spacing: 6) {
                            Image(systemName: "checkmark.circle.fill")
                            Text("Save Changes")
                                .font(.taqvo(.body))
                        }
                        .foregroundColor(.taqvoTextLight)
                        .padding(.horizontal, 20)
                        .padding(.vertical, 10)
                        .background(Color.taqvoCTA)
                        .cornerRadius(20)
                    }
                    .disabled(profileService.isLoading)
                }
            }
        }
        .padding(.horizontal, 20)
    }
    
    private var statsSection: some View {
        HStack(spacing: 12) {
            statCard(title: "Activities", value: "\(totalActivities)", icon: "figure.run")
            statCard(title: "Distance", value: String(format: "%.1f km", totalDistance / 1000), icon: "location.fill")
            statCard(title: "Streak", value: "0", icon: "flame.fill")
        }
        .padding(.horizontal, 20)
    }
    
    private func statCard(title: String, value: String, icon: String) -> some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.system(size: 20))
                .foregroundColor(.taqvoCTA)
            
            Text(value)
                .font(.taqvo(.title))
                .foregroundColor(.taqvoTextDark)
            
            Text(title)
                .font(.taqvo(.caption))
                .foregroundColor(.taqvoAccentText)
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 20)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    private func sectionHeader(title: String, icon: String) -> some View {
        HStack(spacing: 8) {
            Image(systemName: icon)
                .font(.system(size: 16))
                .foregroundColor(.taqvoCTA)
            Text(title)
                .font(.taqvo(.headline))
                .foregroundColor(.taqvoTextDark)
        }
        .padding(.horizontal, 20)
    }
    
    private var musicIntegrationSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            sectionHeader(title: "Music Integration", icon: "music.note")
            
            VStack(spacing: 0) {
                Picker("Provider", selection: $providerString) {
                    Text("Apple Music").tag(MusicProvider.apple.rawValue)
                    Text("Spotify").tag(MusicProvider.spotify.rawValue)
                }
                .pickerStyle(.segmented)
                .padding(16)
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                if provider == .apple {
                    musicProviderRow(
                        name: "Apple Music",
                        isConnected: musicVM.isAuthorized,
                        action: { musicVM.requestAuthorization() }
                    )
                } else {
                    musicProviderRow(
                        name: "Spotify",
                        isConnected: spotifyVM.isAuthorized,
                        action: { spotifyVM.connect() }
                    )
                    
                    if spotifyVM.isAuthorized {
                        Divider()
                            .background(Color.taqvoAccentText.opacity(0.3))
                            .padding(.horizontal, 16)
                        
                        Button(action: { showSpotifyPicker = true }) {
                            HStack {
                                Image(systemName: "music.note.list")
                                    .foregroundColor(.taqvoCTA)
                                Text("Choose Playlist")
                                    .font(.taqvo(.body))
                                    .foregroundColor(.taqvoTextDark)
                                Spacer()
                                Image(systemName: "chevron.right")
                                    .font(.system(size: 12))
                                    .foregroundColor(.taqvoAccentText)
                            }
                            .padding(16)
                        }
                    }
                }
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                Toggle(isOn: $autoStopMusicOnEnd) {
                    HStack(spacing: 8) {
                        Image(systemName: "stop.circle")
                            .foregroundColor(.taqvoCTA)
                        Text("Auto-stop on activity end")
                            .font(.taqvo(.body))
                            .foregroundColor(.taqvoTextDark)
                    }
                }
                .tint(.taqvoCTA)
                .padding(16)
            }
            .background(Color.black.opacity(0.2))
            .cornerRadius(16)
        }
        .padding(.horizontal, 20)
    }
    
    private func musicProviderRow(name: String, isConnected: Bool, action: @escaping () -> Void) -> some View {
        HStack {
            HStack(spacing: 12) {
                Image(systemName: isConnected ? "checkmark.circle.fill" : "circle")
                    .foregroundColor(isConnected ? .taqvoCTA : .taqvoAccentText)
                    .font(.system(size: 20))
                
                Text(name)
                    .font(.taqvo(.body))
                    .foregroundColor(.taqvoTextDark)
            }
            
            Spacer()
            
            if !isConnected {
                Button(action: action) {
                    Text("Connect")
                        .font(.taqvo(.body))
                        .foregroundColor(.taqvoTextLight)
                        .padding(.horizontal, 16)
                        .padding(.vertical, 8)
                        .background(Color.taqvoCTA)
                        .cornerRadius(12)
                }
            } else {
                Text("Connected")
                    .font(.taqvo(.caption))
                    .foregroundColor(.taqvoAccentText)
            }
        }
        .padding(16)
    }
    
    private var privacySettingsSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            sectionHeader(title: "Privacy & Settings", icon: "lock.shield")
            
            VStack(spacing: 0) {
                VStack(alignment: .leading, spacing: 12) {
                    Text("Post Visibility")
                        .font(.taqvo(.body))
                        .foregroundColor(.taqvoTextDark)
                    
                    Picker("Post Visibility", selection: $postVisibilityRaw) {
                        Text("Public").tag(PostVisibility.publicFeed.rawValue)
                        Text("Friends").tag(PostVisibility.friends.rawValue)
                        Text("Private").tag(PostVisibility.privateOnly.rawValue)
                    }
                    .pickerStyle(.segmented)
                    
                    Text("Controls default privacy for new feed posts")
                        .font(.taqvo(.caption))
                        .foregroundColor(.taqvoAccentText)
                }
                .padding(16)
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                VStack(alignment: .leading, spacing: 12) {
                    Text("Notifications")
                        .font(.taqvo(.body))
                        .foregroundColor(.taqvoTextDark)
                        .padding(.bottom, 4)
                    
                    Toggle(isOn: $notifyGoalCompletion) {
                        Text("Goal completion")
                            .font(.taqvo(.body))
                            .foregroundColor(.taqvoTextDark)
                    }
                    .tint(.taqvoCTA)
                    
                    Toggle(isOn: $notifyNewFollower) {
                        Text("New followers")
                            .font(.taqvo(.body))
                            .foregroundColor(.taqvoTextDark)
                    }
                    .tint(.taqvoCTA)
                    
                    Toggle(isOn: $notifyComments) {
                        Text("Comments on posts")
                            .font(.taqvo(.body))
                            .foregroundColor(.taqvoTextDark)
                    }
                    .tint(.taqvoCTA)
                    
                    Toggle(isOn: $notifyWeeklyStats) {
                        Text("Weekly stats recap")
                            .font(.taqvo(.body))
                            .foregroundColor(.taqvoTextDark)
                    }
                    .tint(.taqvoCTA)
                }
                .padding(16)
            }
            .background(Color.black.opacity(0.2))
            .cornerRadius(16)
        }
        .padding(.horizontal, 20)
    }
    
    private var permissionsSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            sectionHeader(title: "Permissions", icon: "checkmark.shield")
            
            VStack(spacing: 0) {
                permissionRow(
                    title: "Location",
                    subtitle: "Required for route tracking",
                    isEnabled: appState.locationAuthorized,
                    action: { permissionsVM.requestLocationAuthorization() }
                )
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                permissionRow(
                    title: "Motion & Fitness",
                    subtitle: "Required for steps and cadence",
                    isEnabled: appState.motionAuthorized,
                    action: {
                        permissionsVM.requestMotionAuthorization { granted in
                            appState.motionAuthorized = granted
                        }
                    }
                )
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                permissionRow(
                    title: "Background Tracking",
                    subtitle: "Track with screen locked",
                    isEnabled: appState.backgroundTrackingEnabled,
                    action: { permissionsVM.requestAlwaysAuthorization() }
                )
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                permissionRow(
                    title: "Apple Health",
                    subtitle: "Sync workouts and steps",
                    isEnabled: appState.healthAuthorized,
                    action: {
                        permissionsVM.requestHealthAuthorization { granted in
                            appState.healthAuthorized = granted
                        }
                    }
                )
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                Toggle(isOn: $healthSyncEnabled) {
                    Text("Save workouts to Health by default")
                        .font(.taqvo(.body))
                        .foregroundColor(.taqvoTextDark)
                }
                .tint(.taqvoCTA)
                .padding(16)
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                Button(action: {
                    Task {
                        let ok = await health.ensureAuthorization()
                        guard ok else { return }
                        let imported = await health.importWorkouts(daysBack: 180)
                        for s in imported {
                            let hr = await health.averageHeartRateBPM(start: s.startDate, end: s.endDate)
                            await MainActor.run {
                                store.add(summary: s, snapshot: nil, note: "Imported from Apple Health", photo: nil, avgHeartRateBPM: hr)
                            }
                        }
                    }
                }) {
                    HStack {
                        Image(systemName: "square.and.arrow.down")
                        Text("Import Past Workouts")
                            .font(.taqvo(.body))
                    }
                    .foregroundColor(.taqvoTextLight)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 14)
                    .background(appState.healthAuthorized ? Color.taqvoCTA : Color.gray.opacity(0.3))
                    .cornerRadius(12)
                }
                .disabled(!appState.healthAuthorized)
                .padding(16)
            }
            .background(Color.black.opacity(0.2))
            .cornerRadius(16)
        }
        .padding(.horizontal, 20)
    }
    
    private func permissionRow(title: String, subtitle: String, isEnabled: Bool, action: @escaping () -> Void) -> some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.taqvo(.body))
                    .foregroundColor(.taqvoTextDark)
                Text(subtitle)
                    .font(.taqvo(.caption))
                    .foregroundColor(.taqvoAccentText)
            }
            
            Spacer()
            
            Button(action: action) {
                Text(isEnabled ? "Enabled" : "Enable")
                    .font(.taqvo(.caption))
                    .foregroundColor(.taqvoTextLight)
                    .padding(.horizontal, 12)
                    .padding(.vertical, 6)
                    .background(isEnabled ? Color.gray.opacity(0.3) : Color.taqvoCTA)
                    .cornerRadius(8)
            }
            .disabled(isEnabled)
        }
        .padding(16)
    }
    
    private var preferencesSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            sectionHeader(title: "Preferences", icon: "slider.horizontal.3")
            
            VStack(spacing: 0) {
                VStack(alignment: .leading, spacing: 12) {
                    Text("App Theme")
                        .font(.taqvo(.body))
                        .foregroundColor(.taqvoTextDark)
                    
                    Picker("App Theme", selection: $appTheme) {
                        Text("System").tag("system")
                        Text("Light").tag("light")
                        Text("Dark").tag("dark")
                    }
                    .pickerStyle(.segmented)
                }
                .padding(16)
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Language")
                            .font(.taqvo(.body))
                            .foregroundColor(.taqvoTextDark)
                        Text("Requires app restart")
                            .font(.taqvo(.caption))
                            .foregroundColor(.taqvoAccentText)
                    }
                    
                    Spacer()
                    
                    Picker("Language", selection: $preferredLanguageCode) {
                        Text("English").tag("en")
                        Text("Spanish").tag("es")
                        Text("French").tag("fr")
                        Text("German").tag("de")
                        Text("Portuguese").tag("pt")
                        Text("Japanese").tag("ja")
                    }
                    .pickerStyle(.menu)
                    .tint(.taqvoCTA)
                }
                .padding(16)
            }
            .background(Color.black.opacity(0.2))
            .cornerRadius(16)
        }
        .padding(.horizontal, 20)
    }
    
    private var supportSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            sectionHeader(title: "Support", icon: "questionmark.circle")
            
            VStack(spacing: 0) {
                NavigationLink(destination: SupportView()) {
                    HStack {
                        Image(systemName: "book")
                            .foregroundColor(.taqvoCTA)
                        Text("Help & FAQ")
                            .font(.taqvo(.body))
                            .foregroundColor(.taqvoTextDark)
                        Spacer()
                        Image(systemName: "chevron.right")
                            .font(.system(size: 12))
                            .foregroundColor(.taqvoAccentText)
                    }
                    .padding(16)
                }
                
                Divider()
                    .background(Color.taqvoAccentText.opacity(0.3))
                    .padding(.horizontal, 16)
                
                Link(destination: URL(string: "mailto:support@taqvo.app")!) {
                    HStack {
                        Image(systemName: "envelope")
                            .foregroundColor(.taqvoCTA)
                        Text("Contact Support")
                            .font(.taqvo(.body))
                            .foregroundColor(.taqvoTextDark)
                        Spacer()
                        Image(systemName: "arrow.up.right")
                            .font(.system(size: 12))
                            .foregroundColor(.taqvoAccentText)
                    }
                    .padding(16)
                }
            }
            .background(Color.black.opacity(0.2))
            .cornerRadius(16)
        }
        .padding(.horizontal, 20)
    }
    
    // MARK: - Profile Data Management
    
    private func loadProfileData() {
        Task {
            await profileService.loadCurrentUserProfile()
            await MainActor.run {
                if let profile = profileService.currentProfile {
                    profileUsername = profile.username ?? ""
                    
                    // Load profile image if available
                    if let avatarUrl = profile.avatarUrl, !avatarUrl.isEmpty {
                        loadProfileImage(from: avatarUrl)
                    }
                }
            }
        }
    }
    
    private func saveProfileData() async {
        guard hasUnsavedChanges else { return }
        
        print("DEBUG: Saving profile data - Username: '\(profileUsername)', Has Image: \(profileUIImage != nil)")
        
        do {
            try await profileService.updateCurrentUserProfile(
                username: profileUsername.isEmpty ? nil : profileUsername,
                profileImage: profileUIImage
            )
            
            await MainActor.run {
                hasUnsavedChanges = false
            }
            
            print("DEBUG: Profile data saved successfully")
            print("DEBUG: Current profile after save: \(String(describing: profileService.currentProfile))")
        } catch {
            print("ERROR: Failed to save profile data: \(error)")
        }
    }
    
    private func loadProfileImage(from urlOrDataString: String) {
        // Handle data URL: data:image/...;base64,<base64>
        if urlOrDataString.hasPrefix("data:") {
            if let commaIndex = urlOrDataString.firstIndex(of: ",") {
                let base64Part = String(urlOrDataString[urlOrDataString.index(after: commaIndex)...])
                if let data = Data(base64Encoded: base64Part), let image = UIImage(data: data) {
                    DispatchQueue.main.async { self.profileUIImage = image }
                }
            }
            return
        }
        
        // Handle HTTP(S) URL from Supabase Storage
        if urlOrDataString.hasPrefix("http://") || urlOrDataString.hasPrefix("https://") {
            guard let url = URL(string: urlOrDataString) else { return }
            Task {
                do {
                    let (data, _) = try await URLSession.shared.data(from: url)
                    if let image = UIImage(data: data) {
                        await MainActor.run { self.profileUIImage = image }
                    }
                } catch {
                    print("ERROR: Failed to load profile image from URL: \(error)")
                }
            }
            return
        }
        
        // Fallback: treat as raw base64 string
        if let data = Data(base64Encoded: urlOrDataString), let image = UIImage(data: data) {
            DispatchQueue.main.async { self.profileUIImage = image }
        }
    }
}
