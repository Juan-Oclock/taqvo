//
//  MainTabView.swift
//  Taqvo
//
//  Generated by Assistant on 10/17/25
//

import SwiftUI
import UIKit
import Charts
import PhotosUI

struct MainTabView: View {
    @EnvironmentObject var appState: AppState
    @State private var selectedTab: Tab = .activity

    enum Tab: Hashable {
        case feed, community, activity, insights, profile
    }

    var body: some View {
        TabView(selection: $selectedTab) {
            FeedView()
                .tabItem {
                    Label("Feed", systemImage: "list.bullet")
                }
                .tag(Tab.feed)

            CommunityView()
                .tabItem {
                    Label("Community", systemImage: "person.3")
                }
                .tag(Tab.community)

            ActivityView()
                .tabItem {
                    VStack {
                        Image(systemName: "figure.run")
                            .symbolEffect(.pulse, options: .repeating, value: selectedTab == .activity)
                        Text("Activity")
                    }
                }
                .tag(Tab.activity)

            InsightsView()
                .tabItem {
                    Label("Insights", systemImage: "chart.bar.fill")
                }
                .tag(Tab.insights)

            ProfileView()
                .tabItem {
                    Label("Profile", systemImage: "person.crop.circle")
                }
                .tag(Tab.profile)
        }
        .onChange(of: appState.navigateToActivity) { _, go in
            if go {
                selectedTab = .activity
                appState.navigateToActivity = false
            }
        }
        .tint(.taqvoCTA)
        .background(Color.taqvoBackgroundDark)
    }
}

struct ActivityView: View {
    @EnvironmentObject var appState: AppState
    @State private var activityType: ActivityType = .run
    @State private var goal: Goal = .none
    @State private var navigateToLive: Bool = false
    @StateObject private var trackingVM = ActivityTrackingViewModel()

    @AppStorage("goalType") private var storedGoalType: String = Goal.none.rawValue
    @AppStorage("goalTimeSeconds") private var storedGoalTimeSeconds: Double = 30 * 60
    @AppStorage("goalDistanceMeters") private var storedGoalDistanceMeters: Double = 5000
    @AppStorage("autoEndOnGoal") private var storedAutoEndOnGoal: Bool = false
    @AppStorage("autoStopMusicOnEnd") private var autoStopMusicOnEnd: Bool = false
    @AppStorage("preferredMusicProvider") private var storedProviderString: String = MusicProvider.spotify.rawValue

    @State private var timeMinutes: Int = 30
    @State private var distanceKilometers: Double = 5.0
    // Add music integration state for Activity tab
    @StateObject private var musicVM = MusicViewModel()
    @StateObject private var spotifyVM = SpotifyViewModel()
    @State private var showPlaylistPicker: Bool = false
    @State private var showSpotifyPicker: Bool = false

    enum ActivityType: String, CaseIterable { case walk, jog, run, ride }
    enum Goal: String, CaseIterable { case none, time, distance }

    var body: some View {
        NavigationStack {
            VStack(spacing: 20) {
                Text("Pre-Run Setup")
                    .font(.title2)
                    .foregroundColor(.taqvoTextDark)

                Picker("Type", selection: $activityType) {
                    ForEach(ActivityType.allCases, id: \.self) { t in
                        Text(t.rawValue.capitalized)
                    }
                }
                .pickerStyle(.segmented)

                // Music connect section (moved from Community -> Activity)
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Text("Music")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Spacer()
                    }
                    VStack(alignment: .leading, spacing: 8) {
                        HStack {
                            Image(systemName: "music.note.list")
                                .foregroundColor(.taqvoCTA)
                            Text("Apple Music")
                                .foregroundColor(.taqvoTextDark)
                            Spacer()
                            if musicVM.isAuthorized {
                                Button("Choose Playlist") { showPlaylistPicker = true }
                                    .foregroundColor(.taqvoTextLight)
                                    .padding(.horizontal, 12)
                            }
                        }
                        HStack {
                            Image(systemName: "music.note")
                                .foregroundColor(.taqvoCTA)
                            Text("Spotify")
                                .foregroundColor(.taqvoTextDark)
                            Spacer()
                            if spotifyVM.isAuthorized {
                                Button("Choose Playlist") { showSpotifyPicker = true }
                                    .foregroundColor(.taqvoTextLight)
                                    .padding(.horizontal, 12)
                            }
                        }
                    }
                }

                Picker("Goal", selection: $goal) {
                    ForEach(Goal.allCases, id: \.self) { g in
                        Text(g.rawValue.capitalized)
                    }
                }
                .pickerStyle(.segmented)

                if goal == .distance {
                    HStack {
                        Text("Distance")
                        Spacer()
                        Text(String(format: "%.1f km", distanceKilometers))
                    }
                    Slider(value: $distanceKilometers, in: 1...42.2, step: 0.5)
                } else if goal == .time {
                    HStack {
                        Text("Time")
                        Spacer()
                        Text("\(Int(timeMinutes)) min")
                    }
                    Slider(value: Binding(get: { Double(timeMinutes) }, set: { timeMinutes = Int($0) }), in: 10...180, step: 5)
                }

                Button {
                    // Map selected type into tracking kind
                    switch activityType {
                    case .walk: trackingVM.setActivityKind(.walk)
                    case .jog: trackingVM.setActivityKind(.jog)
                    case .run: trackingVM.setActivityKind(.run)
                    case .ride: trackingVM.setActivityKind(.ride)
                    }

                    switch goal {
                    case .none:
                        trackingVM.setTimeGoal(nil)
                        trackingVM.setDistanceGoal(nil)
                    case .time:
                        trackingVM.setTimeGoal(Double(timeMinutes * 60))
                        trackingVM.setDistanceGoal(nil)
                    case .distance:
                        trackingVM.setDistanceGoal(distanceKilometers * 1000.0)
                        trackingVM.setTimeGoal(nil)
                    }
                    trackingVM.autoEndOnGoal = storedAutoEndOnGoal
                    navigateToLive = true
                } label: {
                    Text("Start")
                        .font(.headline)
                        .foregroundColor(.taqvoTextLight)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.taqvoCTA)
                        .cornerRadius(16)
                }
                .padding(.top, 8)

                // Removed duplicate NavigationLink(isActive:) to avoid immediate pop
                // Navigation is handled by .navigationDestination below
                // NavigationLink(destination: LiveActivityView().environmentObject(trackingVM), isActive: $navigateToLive) {
                //     EmptyView()
                // }
            }
            .padding()
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Activity")
            .onAppear {
                // Hydrate baseline from storage
                goal = Goal(rawValue: storedGoalType) ?? .none
                timeMinutes = max(5, min(180, Int(storedGoalTimeSeconds / 60)))
                distanceKilometers = max(1.0, min(42.2, storedGoalDistanceMeters / 1000.0))

                // Apply intents for preselection if present
                if let intent = appState.activityIntent {
                    switch intent {
                    case .walk: activityType = .walk
                    case .jog: activityType = .jog
                    case .run: activityType = .run
                    case .ride: activityType = .ride
                    }
                }
                if let goalIntent = appState.goalIntentType {
                    switch goalIntent {
                    case .none:
                        goal = .none
                    case .time:
                        goal = .time
                        if let seconds = appState.goalIntentSeconds {
                            timeMinutes = max(10, min(180, Int(seconds / 60)))
                        }
                    case .distance:
                        goal = .distance
                        if let meters = appState.goalIntentMeters {
                            distanceKilometers = max(1.0, min(42.2, meters / 1000.0))
                        }
                    }
                }

                // Clear intents after applying
                appState.activityIntent = nil
                appState.goalIntentType = nil
                appState.goalIntentSeconds = nil
                appState.goalIntentMeters = nil

                // Music hooks
                if musicVM.isAuthorized {
                    musicVM.startObserving()
                    musicVM.loadPlaylists()
                }
                Task { if spotifyVM.isAuthorized { await spotifyVM.refreshState() } }
            }
            .navigationDestination(isPresented: $navigateToLive) {
                LiveActivityView()
                    .environmentObject(trackingVM)
            }
            .sheet(isPresented: $showPlaylistPicker) {
                PlaylistPickerView(musicVM: musicVM)
            }
            .sheet(isPresented: $showSpotifyPicker) {
                SpotifyPlaylistPickerView(spotifyVM: spotifyVM)
            }
        }
    }
}

struct SupportView: View {
    var body: some View {
        List {
            Section("Help & FAQ") {
                Text("Getting started with Taqvo")
                Text("Tracking accuracy and tips")
                Text("Sharing and privacy settings")
            }
            Section("Contact") {
                Link("Email support", destination: URL(string: "mailto:support@taqvo.app")!)
                Link("Privacy Policy", destination: URL(string: "https://taqvo.app/privacy")!)
                Link("Terms of Service", destination: URL(string: "https://taqvo.app/terms")!)
            }
        }
        .scrollContentBackground(.hidden)
        .background(Color.taqvoBackgroundDark)
        .navigationTitle("Support")
    }
}

struct FeedView: View {
    @EnvironmentObject var store: ActivityStore

    var body: some View {
        NavigationStack {
            Group {
                if store.activities.isEmpty {
                    VStack(spacing: 12) {
                        Text("No activities yet")
                            .font(.title3)
                            .foregroundColor(.taqvoTextDark)
                        Text("Finish a run and Share to Feed from the summary.")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                            .multilineTextAlignment(.center)
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                } else {
                    List {
                        ForEach(store.activities) { a in
                            NavigationLink(destination: ActivityDetailView(activity: a)) {
                                ActivityRow(activity: a)
                            }
                            .listRowBackground(Color.black.opacity(0.08))
                        }
                    }
                    .listStyle(.plain)
                }
            }
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Feed")
        }
    }
}

struct ActivityRow: View {
    let activity: FeedActivity
    @EnvironmentObject var store: ActivityStore

    private var paceString: String {
        ActivityTrackingViewModel.formattedPace(distanceMeters: activity.distanceMeters,
                                               durationSeconds: activity.durationSeconds)
    }

    private var verb: String {
        switch activity.kind {
        case .walk: return "Walked"
        case .jog: return "Jogged"
        case .run: return "Ran"
        case .ride: return "Rode"
        }
    }

    private func compositeShareImageURL() -> URL {
        // Compose a lightweight share image with snapshot/photo and metrics overlay
        let view = ZStack {
            if let data = activity.snapshotPNG, let img = UIImage(data: data) {
                Image(uiImage: img).resizable().aspectRatio(contentMode: .fill)
            } else if let data = activity.photoPNG, let img = UIImage(data: data) {
                Image(uiImage: img).resizable().aspectRatio(contentMode: .fill)
            } else {
                Color.black.opacity(0.8)
            }
            VStack(alignment: .leading, spacing: 6) {
                let header: String = {
                    let t = activity.title?.trimmingCharacters(in: .whitespacesAndNewlines)
                    if let t, !t.isEmpty { return t }
                    return "\(verb) \(String(format: "%.2f km", activity.distanceMeters/1000.0))"
                }()
                Text(header)
                    .font(.headline)
                    .foregroundColor(.white)
                    .shadow(color: .black.opacity(0.6), radius: 2)
                HStack(spacing: 12) {
                    Text(ActivityTrackingViewModel.formattedDuration(activity.durationSeconds))
                    Text(ActivityTrackingViewModel.formattedPace(distanceMeters: activity.distanceMeters, durationSeconds: activity.durationSeconds))
                    Text(String(format: "%.0f kcal", activity.caloriesKilocalories))
                }
                .font(.subheadline)
                .foregroundColor(.white)
                .shadow(color: .black.opacity(0.6), radius: 2)
                Text(activity.endDate.formatted(date: .abbreviated, time: .shortened))
                    .font(.caption)
                    .foregroundColor(.white.opacity(0.9))
                    .shadow(color: .black.opacity(0.6), radius: 2)
                Spacer()
                HStack {
                    Image(systemName: "figure.run")
                    Text("Taqvo")
                }
                .font(.caption)
                .foregroundColor(.white.opacity(0.9))
                .padding(.top, 8)
            }
            .padding()
            .frame(maxWidth: .infinity, alignment: .leading)
        }
        .frame(width: 800, height: 450)

        let renderer = ImageRenderer(content: view)
        renderer.scale = 2
        let url = FileManager.default.temporaryDirectory.appendingPathComponent("taqvo-share-\(Int(activity.endDate.timeIntervalSince1970)).png")
        if let uiImg = renderer.uiImage, let data = uiImg.pngData() {
            try? data.write(to: url)
        } else {
            // Guaranteed PNG fallback
            let size = CGSize(width: 800, height: 450)
            UIGraphicsBeginImageContextWithOptions(size, true, 2)
            UIColor.black.setFill()
            UIBezierPath(rect: CGRect(origin: .zero, size: size)).fill()
            let fallback = UIGraphicsGetImageFromCurrentImageContext()
            UIGraphicsEndImageContext()
            if let data = fallback?.pngData() { try? data.write(to: url) }
        }
        return url
    }


    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            // Headline uses custom title if available, otherwise verb + distance
            if let t = activity.title?.trimmingCharacters(in: .whitespacesAndNewlines), !t.isEmpty {
                Text(t).font(.headline)
            } else {
                Text("\(verb) \(String(format: "%.2f km", activity.distanceMeters/1000.0))").font(.headline)
            }
            if let data = activity.photoPNG, let img = UIImage(data: data) {
                Image(uiImage: img)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .cornerRadius(12)
            } else if let data = activity.snapshotPNG, let img = UIImage(data: data) {
                Image(uiImage: img)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .cornerRadius(12)
            } else {
                MapRouteView(route: ActivityStore.clCoordinates(from: activity.route))
                    .frame(height: 180)
                    .cornerRadius(12)
            }

            HStack {
                Text(String(format: "%.2f km", activity.distanceMeters/1000.0))
                    .foregroundColor(.taqvoTextDark)
                    .font(.headline)
                Spacer()
                Text(ActivityTrackingViewModel.formattedDuration(activity.durationSeconds))
                    .foregroundColor(.taqvoTextDark)
                    .font(.headline)
                Spacer()
                Text(paceString)
                    .foregroundColor(.taqvoAccentText)
                    .font(.subheadline)
            }
            HStack {
                Text(verb)
                    .foregroundColor(.taqvoAccentText)
                    .font(.caption)
                Spacer()
                Text(String(format: "%.0f kcal", activity.caloriesKilocalories))
                    .foregroundColor(.taqvoAccentText)
                    .font(.caption)
            }
            if let title = activity.challengeTitle, !title.isEmpty {
                HStack(spacing: 8) {
                    HStack(spacing: 4) {
                        Image(systemName: "flag.2.crossed")
                            .font(.caption2)
                        Text(title)
                            .font(.caption)
                    }
                    .foregroundColor(.taqvoCTA)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(Color.taqvoCTA.opacity(0.12))
                    .overlay(
                        RoundedRectangle(cornerRadius: 8)
                            .stroke(Color.taqvoCTA, lineWidth: 1)
                    )
                    .cornerRadius(8)

                    if let isPublic = activity.challengeIsPublic {
                        HStack(spacing: 4) {
                            Image(systemName: isPublic ? "globe" : "lock.fill")
                                .font(.caption2)
                            Text(isPublic ? "Public" : "Private")
                                .font(.caption)
                        }
                        .foregroundColor(isPublic ? .taqvoCTA : .taqvoAccentText)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 4)
                        .background((isPublic ? Color.taqvoCTA : Color.taqvoAccentText).opacity(0.12))
                        .overlay(
                            RoundedRectangle(cornerRadius: 8)
                                .stroke(isPublic ? Color.taqvoCTA : Color.taqvoAccentText, lineWidth: 1)
                        )
                        .cornerRadius(8)
                    }
                    Spacer()
                }
            }
            if let note = activity.note, !note.isEmpty {
                Text(note)
                    .foregroundColor(.taqvoTextDark)
                    .font(.body)
                    .lineLimit(3)
            }
            Text(activity.endDate.formatted(date: .abbreviated, time: .shortened))
                .foregroundColor(.taqvoAccentText)
                .font(.caption)

            HStack(spacing: 16) {
                Button {
                    store.toggleLike(activityID: activity.id)
                } label: {
                    HStack(spacing: 6) {
                        Image(systemName: activity.isLiked ? "heart.fill" : "heart")
                        Text("\(activity.likeCount)")
                    }
                }
                .buttonStyle(.plain)
                .foregroundColor(activity.isLiked ? .taqvoCTA : .taqvoTextDark)

                NavigationLink(destination: CommentsView(activityID: activity.id)) {
                    HStack(spacing: 6) {
                        Image(systemName: "bubble.right")
                        Text("\(activity.comments.count)")
                    }
                }
                .buttonStyle(.plain)
                .foregroundColor(.taqvoTextDark)

                ShareLink(item: compositeShareImageURL()) {
                    Image(systemName: "square.and.arrow.up")
                }
                .tint(.taqvoCTA)
            }
        }
        .padding(.vertical, 8)
    }
}

struct CommunityView: View {
    @EnvironmentObject var store: ActivityStore
    @EnvironmentObject var community: CommunityViewModel
    @EnvironmentObject var appState: AppState
    @State private var showingCreateSheet = false
    @State private var showingCreateClubSheet = false
    var body: some View {
        NavigationStack {
            List {
                // Empty state when there are no public challenges
                if community.challenges.isEmpty {
                    Section {
                        VStack(spacing: 12) {
                            Image(systemName: "figure.run.circle")
                                .font(.system(size: 48))
                                .foregroundColor(.taqvoCTA)
                            Text("No public challenges yet")
                                .font(.headline)
                                .foregroundColor(.taqvoTextDark)
                            Text("If you just set up Supabase, add a public challenge or seed data. Tap Reload to try again.")
                                .font(.caption)
                                .multilineTextAlignment(.center)
                                .foregroundColor(.taqvoAccentText)
                                .padding(.horizontal)
                            Button {
                                community.load()
                                community.refreshProgress(from: store)
                            } label: {
                                Label("Reload", systemImage: "arrow.clockwise")
                            }
                        }
                    }
                }

                // Leaderboard filters + list
                Section("Leaderboard Filters") {
                    Picker("Sort", selection: $community.leaderboardSort) {
                        Text("Distance").tag(LeaderboardSort.distance)
                        Text("Pace").tag(LeaderboardSort.pace)
                        Text("Streak").tag(LeaderboardSort.streak)
                    }
                    .pickerStyle(.segmented)
                    .onChange(of: community.leaderboardSort) { sort in
                        community.setLeaderboardSort(sort)
                    }
                }
                Section("Leaderboard") {
                    ForEach(community.leaderboard) { entry in
                        HStack {
                            Text("#\(entry.rank)").foregroundColor(.taqvoAccentText)
                            Text(entry.userName).foregroundColor(.taqvoTextDark)
                            Spacer()
                            VStack(alignment: .trailing) {
                                Text(String(format: "%.1f km", entry.totalDistanceMeters/1000.0))
                                    .foregroundColor(.taqvoTextDark)
                                if let dur = entry.totalDurationSeconds {
                                    let paceStr = ActivityTrackingViewModel.formattedPace(distanceMeters: entry.totalDistanceMeters, durationSeconds: dur)
                                    Text(paceStr).font(.caption).foregroundColor(.taqvoAccentText)
                                }
                                if let streak = entry.currentStreakDays, streak > 0 {
                                    Text("\(streak)d streak").font(.caption2).foregroundColor(.taqvoAccentText)
                                }
                            }
                        }
                    }
                }

                // Clubs section
                Section("Clubs") {
                    if community.clubs.isEmpty {
                        Text("No clubs yet").foregroundColor(.taqvoAccentText)
                    } else {
                        ForEach(community.clubs) { cl in
                            HStack {
                                VStack(alignment: .leading) {
                                    Text(cl.name).font(.headline).foregroundColor(.taqvoTextDark)
                                    Text(cl.description).font(.caption).foregroundColor(.taqvoAccentText)
                                }
                                Spacer()
                                Button(community.clubs.first(where: { $0.id == cl.id })?.isJoined == true ? "Leave" : "Join") {
                                    community.toggleClubJoin(clubID: cl.id)
                                }
                                .buttonStyle(TaqvoCTAButtonStyle())
                            }
                        }
                    }
                    Button {
                        showingCreateClubSheet = true
                    } label: {
                        Label("Create Club", systemImage: "plus")
                    }
                }

                Section("Challenges") {
                    ForEach(community.challenges) { ch in
                        NavigationLink(destination: ChallengeDetailView(challenge: ch)) {
                            VStack(alignment: .leading, spacing: 8) {
                                HStack {
                                    Text(ch.title)
                                        .font(.headline)
                                        .foregroundColor(.taqvoTextDark)
                                    Spacer()
                                    Button(community.challenges.first(where: { $0.id == ch.id })?.isJoined == true ? "Leave" : "Join") {
                                        community.toggleJoin(challengeID: ch.id)
                                        community.refreshProgress(from: store)
                                        if community.challenges.first(where: { $0.id == ch.id })?.isJoined == true {
                                            appState.activityIntent = .run
                                            appState.goalIntentType = .distance
                                            appState.goalIntentMeters = 5000
                                            appState.linkedChallengeTitle = ch.title
                                            appState.linkedChallengeIsPublic = ch.isPublic
                                            appState.navigateToActivity = true
                                        }
                                    }
                                    .buttonStyle(TaqvoCTAButtonStyle())
                                }
                                .buttonStyle(.bordered)
                                .tint(.taqvoCTA)
                                Text(ch.detail)
                                    .font(.caption)
                                    .foregroundColor(.taqvoAccentText)
                                HStack {
                                    Text(String(format: "Goal: %.0f km", ch.goalDistanceMeters/1000.0))
                                        .font(.caption)
                                        .foregroundColor(.taqvoAccentText)
                                    Spacer()
                                    ProgressView(value: ch.progressFraction)
                                        .tint(.taqvoCTA)
                                        .frame(width: 120)
                                }
                            }
                        }
                        .listRowBackground(Color.black.opacity(0.08))
                    }
                }
            }
            .navigationTitle("Community")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button {
                        community.load()
                        community.refreshProgress(from: store)
                    } label: {
                        Label("Reload", systemImage: "arrow.clockwise")
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button {
                        showingCreateSheet = true
                    } label: {
                        Label("Create Challenge", systemImage: "plus")
                    }
                }
            }
        }
        .onAppear {
            if community.challenges.isEmpty { community.load() }
            community.refreshProgress(from: store)
        }
        .sheet(isPresented: $showingCreateSheet) {
            CreateChallengeSheet()
                .environmentObject(community)
                .environmentObject(store)
        }
        .sheet(isPresented: $showingCreateClubSheet) {
            CreateClubSheet()
                .environmentObject(community)
        }
    }
}

struct CreateClubSheet: View {
    @EnvironmentObject var community: CommunityViewModel
    @Environment(\.dismiss) private var dismiss

    @State private var name: String = ""
    @State private var description: String = ""
    @State private var isPublic: Bool = true
    @State private var creating: Bool = false
    @State private var errorMessage: String?

    var body: some View {
        NavigationStack {
            Form {
                Section("Details") {
                    TextField("Name", text: $name)
                    TextField("Description", text: $description, axis: .vertical)
                }
                Section("Visibility") {
                    Toggle("Public", isOn: $isPublic)
                }
                if let msg = errorMessage {
                    Section {
                        Text(msg).foregroundColor(.red)
                    }
                }
            }
            .navigationTitle("Create Club")
            .toolbar {
                ToolbarItem(placement: .confirmationAction) {
                    Button(creating ? "Creating..." : "Create") {
                        Task {
                            creating = true
                            do {
                                try await community.createClub(name: name.trimmingCharacters(in: .whitespacesAndNewlines), description: description.trimmingCharacters(in: .whitespacesAndNewlines), isPublic: isPublic)
                                await MainActor.run { dismiss() }
                            } catch {
                                errorMessage = (error as NSError).localizedDescription
                            }
                            creating = false
                        }
                    }
                    .disabled(name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty || creating)
                }
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") { dismiss() }
                }
            }
        }
    }
}

struct CreateChallengeSheet: View {
    @EnvironmentObject var community: CommunityViewModel
    @EnvironmentObject var store: ActivityStore
    @Environment(\.dismiss) private var dismiss

    @State private var title: String = ""
    @State private var detail: String = ""
    @State private var startDate: Date = Calendar.current.startOfDay(for: Date())
    @State private var endDate: Date = {
        let sd = Calendar.current.startOfDay(for: Date())
        return Calendar.current.date(byAdding: .day, value: 6, to: sd) ?? sd
    }()
    @State private var goalKm: Double = 10
    @State private var isPublic: Bool = true
    @State private var creating: Bool = false
    @State private var errorMessage: String?

    var body: some View {
        NavigationStack {
            Form {
                Section("Details") {
                    TextField("Title", text: $title)
                    TextField("Description", text: $detail, axis: .vertical)
                }
                Section("Schedule") {
                    DatePicker("Start", selection: $startDate, displayedComponents: .date)
                    DatePicker("End", selection: $endDate, in: startDate...Date.distantFuture, displayedComponents: .date)
                }
                Section("Goal") {
                    Stepper(value: $goalKm, in: 1...1000, step: 1) {
                        Text("Goal: \(Int(goalKm)) km")
                    }
                }
                Section("Visibility") {
                    Toggle("Public challenge", isOn: $isPublic)
                        .tint(.taqvoCTA)
                }
                if let msg = errorMessage {
                    Section {
                        Text(msg)
                            .foregroundColor(.red)
                    }
                }
            }
            .navigationTitle("New Challenge")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") { dismiss() }
                }
                ToolbarItem(placement: .confirmationAction) {
                    Button("Create") { submit() }
                        .disabled(!isValid || creating)
                }
            }
        }
    }

    private var isValid: Bool {
        !title.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty && endDate >= startDate && goalKm > 0
    }

    private func submit() {
        creating = true
        errorMessage = nil
        Task {
            do {
                try await community.createChallenge(
                    title: title.trimmingCharacters(in: .whitespacesAndNewlines),
                    detail: detail.trimmingCharacters(in: .whitespacesAndNewlines),
                    startDate: Calendar.current.startOfDay(for: startDate),
                    endDate: Calendar.current.startOfDay(for: endDate),
                    goalDistanceMeters: goalKm * 1000.0,
                    isPublic: isPublic,
                    autoJoin: true
                )
                await MainActor.run {
                    community.refreshProgress(from: store)
                    dismiss()
                }
            } catch {
                await MainActor.run {
                    errorMessage = error.localizedDescription
                }
            }
            creating = false
        }
    }
}

struct InsightsView: View {
    @EnvironmentObject var store: ActivityStore
    @EnvironmentObject var community: CommunityViewModel
    @State private var period: Period = .weekly

    enum Period: String, CaseIterable { case daily, weekly, monthly }

    private func km(_ meters: Double) -> String {
        String(format: "%.2f km", meters/1000.0)
    }

    private func paceMinPerKm(distanceMeters: Double, durationSeconds: Double) -> Double {
        guard distanceMeters > 1, durationSeconds > 0 else { return 0 }
        let secPerKm = durationSeconds / (distanceMeters / 1000.0)
        return secPerKm / 60.0
    }

    private func exportInsightsCSV(period: Period, weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> URL {
        var rows: [String] = ["date,total_km,total_seconds,total_calories_kcal,avg_pace_min_per_km,avg_intensity_kcal_per_min,longest_run_km,longest_run_seconds,run_count"]
        let df = ISO8601DateFormatter()
        switch period {
        case .weekly:
            for w in weekly {
                let avg = paceMinPerKm(distanceMeters: w.totalDistanceMeters, durationSeconds: w.totalDurationSeconds)
                let intensity = w.totalDurationSeconds > 0 ? w.totalCaloriesKilocalories / (w.totalDurationSeconds / 60.0) : 0
                let totalKm = String(format: "%.2f", w.totalDistanceMeters/1000.0)
                let totalCal = String(format: "%.0f", w.totalCaloriesKilocalories)
                let avgStr = String(format: "%.2f", avg)
                let intensityStr = String(format: "%.2f", intensity)
                let longestKm = String(format: "%.2f", w.longestRunMeters/1000.0)
                rows.append("\(df.string(from: w.weekStart)),\(totalKm),\(Int(w.totalDurationSeconds)),\(totalCal),\(avgStr),\(intensityStr),\(longestKm),\(Int(w.longestRunDurationSeconds)),\(0)")
            }
        case .daily:
            for d in daily {
                let avg = paceMinPerKm(distanceMeters: d.totalDistanceMeters, durationSeconds: d.totalDurationSeconds)
                let intensity = d.totalDurationSeconds > 0 ? d.totalCaloriesKilocalories / (d.totalDurationSeconds / 60.0) : 0
                let totalKm = String(format: "%.2f", d.totalDistanceMeters/1000.0)
                let totalCal = String(format: "%.0f", d.totalCaloriesKilocalories)
                let avgStr = String(format: "%.2f", avg)
                let intensityStr = String(format: "%.2f", intensity)
                let longestKm = String(format: "%.2f", d.longestRunMeters/1000.0)
                rows.append("\(df.string(from: d.dayStart)),\(totalKm),\(Int(d.totalDurationSeconds)),\(totalCal),\(avgStr),\(intensityStr),\(longestKm),\(Int(d.longestRunDurationSeconds)),\(d.runCount)")
            }
        case .monthly:
            for m in monthly {
                let avg = paceMinPerKm(distanceMeters: m.totalDistanceMeters, durationSeconds: m.totalDurationSeconds)
                let intensity = m.totalDurationSeconds > 0 ? m.totalCaloriesKilocalories / (m.totalDurationSeconds / 60.0) : 0
                let totalKm = String(format: "%.2f", m.totalDistanceMeters/1000.0)
                let totalCal = String(format: "%.0f", m.totalCaloriesKilocalories)
                let avgStr = String(format: "%.2f", avg)
                let intensityStr = String(format: "%.2f", intensity)
                let longestKm = String(format: "%.2f", m.longestRunMeters/1000.0)
                rows.append("\(df.string(from: m.monthStart)),\(totalKm),\(Int(m.totalDurationSeconds)),\(totalCal),\(avgStr),\(intensityStr),\(longestKm),\(Int(m.longestRunDurationSeconds)),\(m.runCount)")
            }
        }
        let csv = rows.joined(separator: "\n")
        let filename = "taqvo-insights-\(period.rawValue)-\(Int(Date().timeIntervalSince1970)).csv"
        let url = FileManager.default.temporaryDirectory.appendingPathComponent(filename)
        try? csv.data(using: .utf8)?.write(to: url)
        return url
    }

    @ViewBuilder
    private func distanceChart(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            if weekly.isEmpty { EmptyView() } else {
                Chart(weekly) { w in
                    BarMark(
                        x: .value("Week", w.weekStart),
                        y: .value("Km", w.totalDistanceMeters / 1000.0)
                    )
                    .foregroundStyle(Color.taqvoCTA)
                }
                .chartXAxis(.hidden)
                .chartYAxis { AxisMarks(position: .leading) }
                .frame(height: 180)
            }
        case .daily:
            if daily.isEmpty { EmptyView() } else {
                Chart(daily) { d in
                    BarMark(
                        x: .value("Day", d.dayStart),
                        y: .value("Km", d.totalDistanceMeters / 1000.0)
                    )
                    .foregroundStyle(Color.taqvoCTA)
                }
                .chartXAxis(.hidden)
                .chartYAxis { AxisMarks(position: .leading) }
                .frame(height: 180)
            }
        case .monthly:
            if monthly.isEmpty { EmptyView() } else {
                Chart(monthly) { m in
                    BarMark(
                        x: .value("Month", m.monthStart),
                        y: .value("Km", m.totalDistanceMeters / 1000.0)
                    )
                    .foregroundStyle(Color.taqvoCTA)
                }
                .chartXAxis(.hidden)
                .chartYAxis { AxisMarks(position: .leading) }
                .frame(height: 180)
            }
        }
    }

    @ViewBuilder
    private func paceChart(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            Chart(weekly) { w in
                LineMark(
                    x: .value("Week", w.weekStart),
                    y: .value("min/km", paceMinPerKm(distanceMeters: w.totalDistanceMeters, durationSeconds: w.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .daily:
            Chart(daily) { d in
                LineMark(
                    x: .value("Day", d.dayStart),
                    y: .value("min/km", paceMinPerKm(distanceMeters: d.totalDistanceMeters, durationSeconds: d.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .monthly:
            Chart(monthly) { m in
                LineMark(
                    x: .value("Month", m.monthStart),
                    y: .value("min/km", paceMinPerKm(distanceMeters: m.totalDistanceMeters, durationSeconds: m.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        }
    }

    @ViewBuilder
    private func caloriesChart(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            Chart(weekly) { w in
                BarMark(
                    x: .value("Week", w.weekStart),
                    y: .value("kcal", w.totalCaloriesKilocalories)
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .daily:
            Chart(daily) { d in
                BarMark(
                    x: .value("Day", d.dayStart),
                    y: .value("kcal", d.totalCaloriesKilocalories)
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .monthly:
            Chart(monthly) { m in
                BarMark(
                    x: .value("Month", m.monthStart),
                    y: .value("kcal", m.totalCaloriesKilocalories)
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        }
    }

    private func intensityKcalPerMin(calories: Double, seconds: Double) -> Double {
        seconds > 0 ? calories / (seconds / 60.0) : 0
    }

    @ViewBuilder
    private func intensityChart(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            Chart(weekly) { w in
                LineMark(
                    x: .value("Week", w.weekStart),
                    y: .value("kcal/min", intensityKcalPerMin(calories: w.totalCaloriesKilocalories, seconds: w.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .daily:
            Chart(daily) { d in
                LineMark(
                    x: .value("Day", d.dayStart),
                    y: .value("kcal/min", intensityKcalPerMin(calories: d.totalCaloriesKilocalories, seconds: d.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        case .monthly:
            Chart(monthly) { m in
                LineMark(
                    x: .value("Month", m.monthStart),
                    y: .value("kcal/min", intensityKcalPerMin(calories: m.totalCaloriesKilocalories, seconds: m.totalDurationSeconds))
                )
                .foregroundStyle(Color.taqvoCTA)
            }
            .chartXAxis(.hidden)
            .chartYAxis(.hidden)
            .frame(height: 180)
        }
    }

    // MARK: - Insights Helpers
    private func daysWithActivitySet(using calendar: Calendar = Calendar(identifier: .iso8601)) -> Set<Date> {
        Set(store.activities.map { calendar.startOfDay(for: $0.endDate) })
    }

    private func bestDaysStreak(using calendar: Calendar = Calendar(identifier: .iso8601)) -> Int {
        let days = store.activities.map { calendar.startOfDay(for: $0.endDate) }.sorted()
        guard !days.isEmpty else { return 0 }
        var best = 1
        var current = 1
        for i in 1..<days.count {
            if let prev = calendar.date(byAdding: .day, value: 1, to: days[i-1]), prev == days[i] {
                current += 1
                best = max(best, current)
            } else if days[i] != days[i-1] { // reset on gap, but skip duplicates
                current = 1
            }
        }
        return best
    }

    @ViewBuilder
    private func recentStreakRow() -> some View {
        let cal = Calendar(identifier: .iso8601)
        let today = cal.startOfDay(for: Date())
        let set = daysWithActivitySet(using: cal)
        HStack(spacing: 8) {
            ForEach(0..<14) { i in
                let day = cal.date(byAdding: .day, value: -i, to: today) ?? today
                let active = set.contains(day)
                Circle()
                    .fill(active ? Color.taqvoCTA : Color.black.opacity(0.15))
                    .frame(width: 12, height: 12)
            }
        }
    }

    @ViewBuilder
    private func milestoneChip(title: String, achieved: Bool) -> some View {
        HStack(spacing: 6) {
            Image(systemName: achieved ? "checkmark.seal.fill" : "lock")
                .foregroundColor(achieved ? .taqvoCTA : .taqvoAccentText)
            Text(title)
                .font(.caption)
                .foregroundColor(.taqvoTextDark)
        }
        .padding(.horizontal, 10)
        .padding(.vertical, 6)
        .background(Color.black.opacity(0.08))
        .clipShape(RoundedRectangle(cornerRadius: 12))
    }

    @ViewBuilder
    private func milestonesView() -> some View {
        let totalDistance = store.activities.reduce(0.0) { $0 + $1.distanceMeters }
        let longestRun = store.activities.map { $0.distanceMeters }.max() ?? 0
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Text("Milestones")
                    .font(.caption)
                    .foregroundColor(.taqvoAccentText)
                Spacer()
            }
            // Distance milestones (single-activity)
            HStack(spacing: 8) {
                milestoneChip(title: "5K", achieved: longestRun >= 5_000)
                milestoneChip(title: "10K", achieved: longestRun >= 10_000)
                milestoneChip(title: "Half (21K)", achieved: longestRun >= 21_097)
                milestoneChip(title: "Marathon (42K)", achieved: longestRun >= 42_195)
            }
            // Total distance milestones (all-time)
            HStack(spacing: 8) {
                milestoneChip(title: "100K total", achieved: totalDistance >= 100_000)
                milestoneChip(title: "250K total", achieved: totalDistance >= 250_000)
                milestoneChip(title: "500K total", achieved: totalDistance >= 500_000)
            }
        }
    }

    @ViewBuilder
    private func weeklyComparisonView(weekly: [WeeklySummary]) -> some View {
        let cal = Calendar(identifier: .iso8601)
        if weekly.count < 2 {
            HStack {
                Text("Compare Weeks")
                    .font(.caption)
                    .foregroundColor(.taqvoAccentText)
                Spacer()
                Text("Not enough data")
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
            }
        } else {
            let cur = weekly[0]
            let prev = weekly[1]
            let distDelta = cur.totalDistanceMeters - prev.totalDistanceMeters
            let distPct = prev.totalDistanceMeters > 0 ? (distDelta / prev.totalDistanceMeters) * 100.0 : 0
            let durDelta = cur.totalDurationSeconds - prev.totalDurationSeconds
            let paceCur = paceMinPerKm(distanceMeters: cur.totalDistanceMeters, durationSeconds: cur.totalDurationSeconds)
            let pacePrev = paceMinPerKm(distanceMeters: prev.totalDistanceMeters, durationSeconds: prev.totalDurationSeconds)
            let paceDelta = paceCur - pacePrev // negative is improvement
            let weekComps = cal.dateComponents([.yearForWeekOfYear, .weekOfYear], from: cur.weekStart)
            let runCountCur = store.activities.filter { cal.dateComponents([.yearForWeekOfYear, .weekOfYear], from: $0.endDate) == weekComps }.count
            let prevComps = cal.dateComponents([.yearForWeekOfYear, .weekOfYear], from: prev.weekStart)
            let runCountPrev = store.activities.filter { cal.dateComponents([.yearForWeekOfYear, .weekOfYear], from: $0.endDate) == prevComps }.count
            let runDelta = runCountCur - runCountPrev

            VStack(spacing: 8) {
                HStack {
                    Text("Compare Weeks")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Spacer()
                }
                HStack {
                    VStack(alignment: .leading) {
                        Text("Distance")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Text(String(format: "%+.2f km (%+.0f%%)", distDelta/1000.0, distPct))
                            .font(.headline)
                            .foregroundColor(.taqvoTextDark)
                    }
                    Spacer()
                    VStack(alignment: .trailing) {
                        Text("Duration")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Text(String(format: "%+d min", Int(durDelta/60.0)))
                            .font(.headline)
                            .foregroundColor(.taqvoTextDark)
                    }
                }
                HStack {
                    VStack(alignment: .leading) {
                        Text("Pace")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Text(String(format: "%+.2f min/km", paceDelta))
                            .font(.headline)
                            .foregroundColor(paceDelta < 0 ? .green : .red)
                    }
                    Spacer()
                    VStack(alignment: .trailing) {
                        Text("Runs")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Text(String(format: "%+d", runDelta))
                            .font(.headline)
                            .foregroundColor(.taqvoTextDark)
                    }
                }
            }
        }
    }

    @ViewBuilder
    private func summaryList(weekly: [WeeklySummary], daily: [DailySummary], monthly: [MonthlySummary]) -> some View {
        switch period {
        case .weekly:
            VStack(spacing: 12) {
                ForEach(weekly) { w in
                    WeeklySummaryCard(summary: w)
                }
            }
        case .daily:
            VStack(spacing: 12) {
                ForEach(daily) { d in
                    DailySummaryCard(summary: d)
                }
            }
        case .monthly:
            VStack(spacing: 12) {
                ForEach(monthly) { m in
                    MonthlySummaryCard(summary: m)
                }
            }
        }
    }

    var body: some View {
        NavigationStack {
            Group {
                let weekly: [WeeklySummary] = store.weeklySummaries()
                let daily: [DailySummary] = store.dailySummaries()
                let monthly: [MonthlySummary] = store.monthlySummaries()
                let allEmpty = weekly.isEmpty && daily.isEmpty && monthly.isEmpty

                if allEmpty {
                    VStack(spacing: 12) {
                        Text("No insights yet")
                            .font(.title3)
                            .foregroundColor(.taqvoTextDark)
                        Text("Share your runs to build insights across periods.")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                            .multilineTextAlignment(.center)
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                } else {
                    ScrollView {
                        VStack(spacing: 16) {
                            // Active streak metric
                            HStack {
                                Text("Streak")
                                    .font(.caption)
                                    .foregroundColor(.taqvoAccentText)
                                Spacer()
                                Text("\(store.activeDaysStreak()) days")
                                    .font(.headline)
                                    .foregroundColor(.taqvoTextDark)
                            }
                            // Visual streak tracker (last 14 days)
                            recentStreakRow()
                            HStack {
                                Text("Best streak")
                                    .font(.caption)
                                    .foregroundColor(.taqvoAccentText)
                                Spacer()
                                Text("\(bestDaysStreak()) days")
                                    .font(.subheadline)
                                    .foregroundColor(.taqvoTextDark)
                            }

                            Picker("Period", selection: $period) {
                                Text("Daily").tag(Period.daily)
                                Text("Weekly").tag(Period.weekly)
                                Text("Monthly").tag(Period.monthly)
                            }
                            .pickerStyle(.segmented)

                            // Compare progress with past weeks
                            weeklyComparisonView(weekly: weekly)

                            // Distance chart
                            distanceChart(weekly: weekly, daily: daily, monthly: monthly)

                            // Pace trend chart
                            paceChart(weekly: weekly, daily: daily, monthly: monthly)

                            // Calories chart
                            caloriesChart(weekly: weekly, daily: daily, monthly: monthly)

                            // Intensity chart (kcal/min)
                            intensityChart(weekly: weekly, daily: daily, monthly: monthly)

                            // Milestones grid (visuals)
                            milestonesView()

                            // Cards list
                            summaryList(weekly: weekly, daily: daily, monthly: monthly)
                        }
                        .padding()
                    }
                }
            }
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Insights")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                let weekly = store.weeklySummaries()
                let daily = store.dailySummaries()
                let monthly = store.monthlySummaries()
                ToolbarItem(placement: .navigationBarLeading) {
                    Button {
                        community.refreshProgress(from: store)
                    } label: {
                        Label("Sync", systemImage: "arrow.triangle.2.circlepath")
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    ShareLink(item: exportInsightsCSV(period: period, weekly: weekly, daily: daily, monthly: monthly)) {
                        Label("Share", systemImage: "square.and.arrow.up")
                    }
                }
            }
        }
    }
}

struct WeeklyBarChart: View {
    let weeks: [WeeklySummary]

    private var maxDistance: Double {
        weeks.map { $0.totalDistanceMeters }.max() ?? 1
    }

    var body: some View {
        GeometryReader { geo in
            HStack(alignment: .bottom, spacing: 8) {
                ForEach(weeks, id: \.id) { w in
                    let ratio = CGFloat(w.totalDistanceMeters / maxDistance)
                    VStack {
                        RoundedRectangle(cornerRadius: 6)
                            .fill(Color.taqvoCTA)
                            .frame(width: (geo.size.width - 8 * CGFloat(weeks.count - 1)) / CGFloat(weeks.count), height: max(12, geo.size.height * ratio))
                        Text(String(format: "%.0f km", w.totalDistanceMeters/1000.0))
                            .font(.caption2)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                        Text(w.weekStart.formatted(.dateTime.month().day()))
                            .font(.caption2)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                    }
                }
            }
        }
    }
}

struct WeeklySummaryCard: View {
    let summary: WeeklySummary

    private var rangeText: String {
        let cal = Calendar(identifier: .iso8601)
        let end = cal.date(byAdding: .day, value: 6, to: summary.weekStart) ?? summary.weekStart
        let startStr = summary.weekStart.formatted(date: .abbreviated, time: .omitted)
        let endStr = end.formatted(date: .abbreviated, time: .omitted)
        return "\(startStr) – \(endStr)"
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text(rangeText)
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
                Spacer()
                Text(summary.averagePaceString)
                    .font(.subheadline)
                    .foregroundColor(.taqvoAccentText)
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Distance")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.2f km", summary.totalDistanceMeters/1000.0))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                VStack(alignment: .trailing) {
                    Text("Total Time")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(ActivityTrackingViewModel.formattedDuration(summary.totalDurationSeconds))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Calories")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.0f kcal", summary.totalCaloriesKilocalories))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                HStack {
                    Text("Longest Run")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Spacer()
                    Text(String(format: "%.2f km", summary.longestRunMeters/1000.0))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                    Text(" • ")
                        .foregroundColor(.taqvoAccentText)
                    Text(ActivityTrackingViewModel.formattedDuration(summary.longestRunDurationSeconds))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                }
            }
        }
        .padding(.vertical, 8)
    }
}

struct DailySummaryCard: View {
    let summary: DailySummary

    private var dayText: String {
        summary.dayStart.formatted(date: .abbreviated, time: .omitted)
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text(dayText)
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
                Spacer()
                Text(summary.averagePaceString)
                    .font(.subheadline)
                    .foregroundColor(.taqvoAccentText)
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Distance")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.2f km", summary.totalDistanceMeters/1000.0))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                VStack(alignment: .trailing) {
                    Text("Total Time")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(ActivityTrackingViewModel.formattedDuration(summary.totalDurationSeconds))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Calories")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.0f kcal", summary.totalCaloriesKilocalories))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                HStack {
                    Text("Runs")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Spacer()
                    Text("\(summary.runCount)")
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                    Text(" • ")
                        .foregroundColor(.taqvoAccentText)
                    Text("Longest: \(String(format: "%.2f km", summary.longestRunMeters/1000.0)) in \(ActivityTrackingViewModel.formattedDuration(summary.longestRunDurationSeconds))")
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                        .lineLimit(1)
                }
            }
        }
        .padding(.vertical, 8)
    }
}

struct MonthlySummaryCard: View {
    let summary: MonthlySummary

    private var monthText: String {
        summary.monthStart.formatted(.dateTime.month().year())
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text(monthText)
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
                Spacer()
                Text(summary.averagePaceString)
                    .font(.subheadline)
                    .foregroundColor(.taqvoAccentText)
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Distance")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.2f km", summary.totalDistanceMeters/1000.0))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                VStack(alignment: .trailing) {
                    Text("Total Time")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(ActivityTrackingViewModel.formattedDuration(summary.totalDurationSeconds))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Calories")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.0f kcal", summary.totalCaloriesKilocalories))
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                HStack {
                    Text("Runs")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Spacer()
                    Text("\(summary.runCount)")
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                    Text(" • ")
                        .foregroundColor(.taqvoAccentText)
                    Text("Longest: \(String(format: "%.2f km", summary.longestRunMeters/1000.0)) in \(ActivityTrackingViewModel.formattedDuration(summary.longestRunDurationSeconds))")
                        .font(.headline)
                        .foregroundColor(.taqvoTextDark)
                        .lineLimit(1)
                }
            }
        }
        .padding(.vertical, 8)
    }
}

struct ProfileView: View {
    @EnvironmentObject var appState: AppState
    @EnvironmentObject var store: ActivityStore
    @ObservedObject private var supabaseAuth = SupabaseAuthManager.shared
    @StateObject private var permissionsVM = PermissionsViewModel()
    @StateObject private var musicVM = MusicViewModel()
    @StateObject private var spotifyVM = SpotifyViewModel()
    @StateObject private var health = HealthSyncService()
    @AppStorage("preferredMusicProvider") private var providerString: String = MusicProvider.spotify.rawValue
    @AppStorage("autoStopMusicOnEnd") private var autoStopMusicOnEnd: Bool = false
    @AppStorage("appTheme") private var appTheme: String = "system"
    @AppStorage("healthSyncEnabled") private var healthSyncEnabled: Bool = UserDefaults.standard.bool(forKey: "healthSyncEnabled")

    @State private var showSpotifyPicker: Bool = false

    // New stored profile settings
    @AppStorage("profileBio") private var profileBio: String = ""
    @AppStorage("profileUsername") private var profileUsername: String = ""
    @AppStorage("profileImageBase64") private var profileImageBase64: String = ""
    @AppStorage("postVisibility") private var postVisibilityRaw: String = PostVisibility.publicFeed.rawValue
    @AppStorage("notifyGoalCompletion") private var notifyGoalCompletion: Bool = true
    @AppStorage("notifyNewFollower") private var notifyNewFollower: Bool = true
    @AppStorage("notifyComments") private var notifyComments: Bool = true
    @AppStorage("notifyWeeklyStats") private var notifyWeeklyStats: Bool = true
    @AppStorage("preferredLanguage") private var preferredLanguageCode: String = "en"

    @State private var selectedPhotoItem: PhotosPickerItem? = nil
    @State private var profileUIImage: UIImage? = nil

    enum PostVisibility: String, CaseIterable {
        case publicFeed = "public"
        case friends = "friends"
        case privateOnly = "private"
    }

    private var provider: MusicProvider {
        MusicProvider(rawValue: providerString) ?? .spotify
    }

    private func decodeProfileImage() {
        guard !profileImageBase64.isEmpty, let data = Data(base64Encoded: profileImageBase64) else { return }
        profileUIImage = UIImage(data: data)
    }

    var body: some View {
        NavigationStack {
            List {
                Section("Theme") {
                    Picker("App Theme", selection: $appTheme) {
                        Text("System").tag("system")
                        Text("Light").tag("light")
                        Text("Dark").tag("dark")
                    }
                    .pickerStyle(.segmented)

                    Text("Typography: Helvetica Neue per PRD")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                }
                .listRowBackground(Color.black.opacity(0.08))

                // Profile section: photo + bio editing
                Section("Profile") {
                    HStack(spacing: 16) {
                        ZStack {
                            Circle()
                                .fill(Color.black.opacity(0.12))
                                .frame(width: 72, height: 72)
                            if let img = profileUIImage {
                                Image(uiImage: img)
                                    .resizable()
                                    .scaledToFill()
                                    .frame(width: 68, height: 68)
                                    .clipShape(Circle())
                            } else {
                                Image(systemName: "person.crop.circle")
                                    .resizable()
                                    .scaledToFit()
                                    .foregroundColor(.taqvoAccentText)
                                    .frame(width: 52, height: 52)
                            }
                        }
                        VStack(alignment: .leading, spacing: 8) {
                            TextField("Add a username", text: $profileUsername)
                                .textInputAutocapitalization(.never)
                                .disableAutocorrection(true)
                            TextField("Add a short bio", text: $profileBio)
                                .textInputAutocapitalization(.sentences)
                                .disableAutocorrection(false)
                            PhotosPicker(selection: $selectedPhotoItem, matching: .images) {
                                Text("Edit Photo")
                                    .foregroundColor(.taqvoTextLight)
                                    .frame(maxWidth: .infinity)
                                    .padding(.vertical, 8)
                                    .background(Color.taqvoCTA)
                                    .clipShape(RoundedRectangle(cornerRadius: 12))
                            }
                        }
                    }
                    if supabaseAuth.isAuthenticated {
                        Button("Sign out") {
                            SupabaseAuthManager.shared.signOut()
                        }
                        .foregroundColor(.taqvoTextLight)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 8)
                        .background(Color.taqvoCTA.opacity(0.9))
                        .clipShape(RoundedRectangle(cornerRadius: 12))
                    }
                }
                .listRowBackground(Color.black.opacity(0.08))

                Section("Music") {
                    Picker("Provider", selection: $providerString) {
                        Text("Apple").tag(MusicProvider.apple.rawValue)
                        Text("Spotify").tag(MusicProvider.spotify.rawValue)
                    }
                    .pickerStyle(.segmented)

                    if provider == .apple {
                        HStack {
                            Text("Apple Music")
                                .foregroundColor(.taqvoTextDark)
                            Spacer()
                            Image(systemName: musicVM.isAuthorized ? "checkmark.circle.fill" : "exclamationmark.circle")
                                .foregroundColor(musicVM.isAuthorized ? .taqvoCTA : .taqvoAccentText)
                        }
                        Button(musicVM.isAuthorized ? "Connected" : "Connect Apple Music") {
                            musicVM.requestAuthorization()
                        }
                        .disabled(musicVM.isAuthorized)
                        .foregroundColor(.taqvoTextLight)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 8)
                        .background(Color.taqvoCTA)
                        .clipShape(RoundedRectangle(cornerRadius: 12))
                    } else {
                        HStack {
                            Text("Spotify")
                                .foregroundColor(.taqvoTextDark)
                            Spacer()
                            Image(systemName: spotifyVM.isAuthorized ? "checkmark.circle.fill" : "exclamationmark.circle")
                                .foregroundColor(spotifyVM.isAuthorized ? .taqvoCTA : .taqvoAccentText)
                        }
                        Button(spotifyVM.isAuthorized ? "Connected" : "Connect Spotify") {
                            spotifyVM.connect()
                        }
                        .disabled(spotifyVM.isAuthorized)
                        .foregroundColor(.taqvoTextLight)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 8)
                        .background(Color.taqvoCTA)
                        .clipShape(RoundedRectangle(cornerRadius: 12))

                        if spotifyVM.isAuthorized {
                            Button("Choose Spotify Playlist") { showSpotifyPicker = true }
                                .foregroundColor(.taqvoTextLight)
                                .frame(maxWidth: .infinity)
                                .padding(.vertical, 8)
                                .background(Color.taqvoCTA.opacity(0.9))
                                .clipShape(RoundedRectangle(cornerRadius: 12))
                        }
                    }

                    Toggle("Auto stop music when run ends", isOn: $autoStopMusicOnEnd)
                        .tint(.taqvoCTA)
                        .foregroundColor(.taqvoTextDark)
                }
                .listRowBackground(Color.black.opacity(0.08))

                // Activity visibility
                Section("Activity Visibility") {
                    Picker("Post Visibility", selection: $postVisibilityRaw) {
                        Text("Public").tag(PostVisibility.publicFeed.rawValue)
                        Text("Friends").tag(PostVisibility.friends.rawValue)
                        Text("Private").tag(PostVisibility.privateOnly.rawValue)
                    }
                    .pickerStyle(.segmented)
                    Text("Controls default privacy for new feed posts.")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                }
                .listRowBackground(Color.black.opacity(0.08))

                // Notifications
                Section("Notifications") {
                    Toggle("Goal completion", isOn: $notifyGoalCompletion)
                        .tint(.taqvoCTA)
                        .foregroundColor(.taqvoTextDark)
                    Toggle("New followers", isOn: $notifyNewFollower)
                        .tint(.taqvoCTA)
                        .foregroundColor(.taqvoTextDark)
                    Toggle("Comments on my posts", isOn: $notifyComments)
                        .tint(.taqvoCTA)
                        .foregroundColor(.taqvoTextDark)
                    Toggle("Weekly stats recap", isOn: $notifyWeeklyStats)
                        .tint(.taqvoCTA)
                        .foregroundColor(.taqvoTextDark)
                }
                .listRowBackground(Color.black.opacity(0.08))

                // Language
                Section("Language") {
                    Picker("Preferred Language", selection: $preferredLanguageCode) {
                        Text("English").tag("en")
                        Text("Spanish").tag("es")
                        Text("French").tag("fr")
                        Text("German").tag("de")
                        Text("Portuguese").tag("pt")
                        Text("Japanese").tag("ja")
                    }
                    .pickerStyle(.menu)
                    Text("Applies to UI labels (requires app restart).")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                }
                .listRowBackground(Color.black.opacity(0.08))


                // Support & Help
                Section("Support & Help") {
                    NavigationLink("Help & FAQ") { SupportView() }
                    Link("Contact Support", destination: URL(string: "mailto:support@taqvo.app")!)
                        .foregroundColor(.taqvoCTA)
                }
                .listRowBackground(Color.black.opacity(0.08))

                Section("Privacy & Permissions") {
                    HStack {
                        VStack(alignment: .leading) {
                            Text("Location")
                                .font(.headline)
                                .foregroundColor(.taqvoTextDark)
                            Text("Required for route tracking")
                                .font(.caption)
                                .foregroundColor(.taqvoAccentText)
                        }
                        Spacer()
                        Button(action: { permissionsVM.requestLocationAuthorization() }) {
                            Text(appState.locationAuthorized ? "Enabled" : "Enable")
                                .foregroundColor(.taqvoTextLight)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(Color.taqvoCTA)
                                .cornerRadius(12)
                        }
                        .disabled(appState.locationAuthorized)
                    }

                    HStack {
                        VStack(alignment: .leading) {
                            Text("Motion & Fitness")
                                .font(.headline)
                                .foregroundColor(.taqvoTextDark)
                            Text("Required for steps and cadence")
                                .font(.caption)
                                .foregroundColor(.taqvoAccentText)
                        }
                        Spacer()
                        Button(action: {
                            permissionsVM.requestMotionAuthorization { granted in
                                appState.motionAuthorized = granted
                            }
                        }) {
                            Text(appState.motionAuthorized ? "Enabled" : "Enable")
                                .foregroundColor(.taqvoTextLight)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(Color.taqvoCTA)
                                .cornerRadius(12)
                        }
                        .disabled(appState.motionAuthorized)
                    }

                    HStack {
                        VStack(alignment: .leading) {
                            Text("Background Tracking")
                                .font(.headline)
                                .foregroundColor(.taqvoTextDark)
                            Text("Allows tracking if screen locks or you switch apps")
                                .font(.caption)
                                .foregroundColor(.taqvoAccentText)
                        }
                        Spacer()
                        Button(action: { permissionsVM.requestAlwaysAuthorization() }) {
                            Text(appState.backgroundTrackingEnabled ? "Enabled" : "Enable")
                                .foregroundColor(.taqvoTextLight)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(Color.taqvoCTA)
                                .cornerRadius(12)
                        }
                        .disabled(appState.backgroundTrackingEnabled)
                    }

                    HStack {
                        VStack(alignment: .leading) {
                            Text("Apple Health")
                                .font(.headline)
                                .foregroundColor(.taqvoTextDark)
                            Text("Sync workouts and steps")
                                .font(.caption)
                                .foregroundColor(.taqvoAccentText)
                        }
                        Spacer()
                        Button(action: {
                            permissionsVM.requestHealthAuthorization { granted in
                                appState.healthAuthorized = granted
                            }
                        }) {
                            Text(appState.healthAuthorized ? "Enabled" : "Enable")
                                .foregroundColor(.taqvoTextLight)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(Color.taqvoCTA)
                                .cornerRadius(12)
                        }
                        .disabled(appState.healthAuthorized)
                    }

                    Toggle("Save workouts to Health by default", isOn: $healthSyncEnabled)
                        .tint(.taqvoCTA)
                        .foregroundColor(.taqvoTextDark)

                    // Import past workouts from Apple Health
                    Button("Import Past Workouts") {
                        Task {
                            let ok = await health.ensureAuthorization()
                            guard ok else { return }
                            let imported = await health.importWorkouts(daysBack: 180)
                            for s in imported {
                                let hr = await health.averageHeartRateBPM(start: s.startDate, end: s.endDate)
                                await MainActor.run {
                                    store.add(summary: s, snapshot: nil, note: "Imported from Apple Health", photo: nil, avgHeartRateBPM: hr)
                                }
                            }
                        }
                    }
                    .disabled(!appState.healthAuthorized)
                    .foregroundColor(.taqvoTextLight)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 8)
                    .background(Color.taqvoCTA.opacity(0.9))
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                }
                .listRowBackground(Color.black.opacity(0.08))
            }
            .scrollContentBackground(.hidden)
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Profile")
            .onAppear {
                appState.locationAuthorized = permissionsVM.locationAuthorizedState
                appState.motionAuthorized = PermissionsViewModel.motionAuthorized()
                appState.healthAuthorized = PermissionsViewModel.healthAuthorized()
                appState.backgroundTrackingEnabled = permissionsVM.alwaysAuthorizedState
                decodeProfileImage()
            }
            .onReceive(permissionsVM.$locationAuthorizedState) { authorized in
                appState.locationAuthorized = authorized
            }
            .onReceive(permissionsVM.$alwaysAuthorizedState) { authorizedAlways in
                appState.backgroundTrackingEnabled = authorizedAlways
            }
            .onChange(of: selectedPhotoItem) { newItem in
                guard let item = newItem else { return }
                Task {
                    if let data = try? await item.loadTransferable(type: Data.self) {
                        profileUIImage = UIImage(data: data)
                        profileImageBase64 = data.base64EncodedString()
                    }
                }
            }
            .sheet(isPresented: $showSpotifyPicker) {
                SpotifyPlaylistPickerView(spotifyVM: spotifyVM)
            }
            .alert(
                "Sign in failed",
                isPresented: Binding(
                    get: { supabaseAuth.lastAuthError != nil },
                    set: { showing in if !showing { SupabaseAuthManager.shared.lastAuthError = nil } }
                )
            ) {
                Button("OK", role: .cancel) { }
            } message: {
                Text(supabaseAuth.lastAuthError ?? "")
            }
        }
    }
}
