//
//  MainTabView.swift
//  Taqvo
//
//  Generated by Assistant on 10/17/25
//

import SwiftUI
import UIKit

struct MainTabView: View {
    @State private var selectedTab: Tab = .activity

    enum Tab: Hashable {
        case feed, community, activity, insights, profile
    }

    var body: some View {
        TabView(selection: $selectedTab) {
            FeedView()
                .tabItem {
                    Label("Feed", systemImage: "list.bullet")
                }
                .tag(Tab.feed)

            CommunityView()
                .tabItem {
                    Label("Community", systemImage: "person.3")
                }
                .tag(Tab.community)

            ActivityView()
                .tabItem {
                    VStack {
                        Image(systemName: "figure.run")
                            .symbolEffect(.pulse, options: .repeating, value: selectedTab == .activity)
                        Text("Activity")
                    }
                }
                .tag(Tab.activity)

            InsightsView()
                .tabItem {
                    Label("Insights", systemImage: "chart.bar.fill")
                }
                .tag(Tab.insights)

            ProfileView()
                .tabItem {
                    Label("Profile", systemImage: "person.crop.circle")
                }
                .tag(Tab.profile)
        }
        .tint(.taqvoCTA)
        .background(Color.taqvoBackgroundDark)
    }
}

struct FeedView: View {
    @EnvironmentObject var store: ActivityStore

    var body: some View {
        NavigationStack {
            Group {
                if store.activities.isEmpty {
                    VStack(spacing: 12) {
                        Text("No activities yet")
                            .font(.title3)
                            .foregroundColor(.taqvoTextDark)
                        Text("Finish a run and Share to Feed from the summary.")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                            .multilineTextAlignment(.center)
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                } else {
                    List {
                        ForEach(store.activities) { a in
                            NavigationLink(destination: ActivityDetailView(activity: a)) {
                                ActivityRow(activity: a)
                            }
                            .listRowBackground(Color.black.opacity(0.08))
                        }
                    }
                    .listStyle(.plain)
                }
            }
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Feed")
        }
    }
}

struct ActivityRow: View {
    let activity: FeedActivity

    private var paceString: String {
        ActivityTrackingViewModel.formattedPace(distanceMeters: activity.distanceMeters,
                                               durationSeconds: activity.durationSeconds)
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            if let data = activity.photoPNG, let img = UIImage(data: data) {
                Image(uiImage: img)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .cornerRadius(12)
            } else if let data = activity.snapshotPNG, let img = UIImage(data: data) {
                Image(uiImage: img)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .cornerRadius(12)
            } else {
                MapRouteView(route: ActivityStore.clCoordinates(from: activity.route))
                    .frame(height: 180)
                    .cornerRadius(12)
            }

            HStack {
                Text(String(format: "%.2f km", activity.distanceMeters/1000.0))
                    .foregroundColor(.taqvoTextDark)
                    .font(.headline)
                Spacer()
                Text(ActivityTrackingViewModel.formattedDuration(activity.durationSeconds))
                    .foregroundColor(.taqvoTextDark)
                    .font(.headline)
                Spacer()
                Text(paceString)
                    .foregroundColor(.taqvoAccentText)
                    .font(.subheadline)
            }
            if let note = activity.note, !note.isEmpty {
                Text(note)
                    .foregroundColor(.taqvoTextDark)
                    .font(.body)
            }
            Text(activity.endDate.formatted(date: .abbreviated, time: .shortened))
                .foregroundColor(.taqvoAccentText)
                .font(.caption)
        }
        .padding(.vertical, 8)
    }
}

struct CommunityView: View {
    var body: some View {
        NavigationStack {
            VStack(spacing: 16) {
                Text("Community")
                    .font(.title)
                    .foregroundColor(.taqvoTextDark)
                Text("Challenges, clubs, and leaderboards")
                    .foregroundColor(.taqvoAccentText)
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Community")
        }
    }
}

struct ActivityView: View {
    @State private var activityType: ActivityType = .run
    @State private var goal: Goal = .none
    @State private var navigateToLive: Bool = false
    @StateObject private var trackingVM = ActivityTrackingViewModel()

    // Music integration state
    @StateObject private var musicVM = MusicViewModel()
    @State private var showPlaylistPicker: Bool = false
    // Spotify integration state
    @StateObject private var spotifyVM = SpotifyViewModel()
    @State private var showSpotifyPicker: Bool = false

    // Persisted preferences
    @AppStorage("goalType") private var storedGoalType: String = Goal.none.rawValue
    @AppStorage("goalTimeSeconds") private var storedGoalTimeSeconds: Double = 30 * 60
    @AppStorage("goalDistanceMeters") private var storedGoalDistanceMeters: Double = 5000
    @AppStorage("autoEndOnGoal") private var storedAutoEndOnGoal: Bool = false
    @AppStorage("autoStopMusicOnEnd") private var storedAutoStopMusicOnEnd: Bool = false
    @AppStorage("preferredMusicProvider") private var storedProviderString: String = MusicProvider.spotify.rawValue

    // Local UI state
    @State private var timeMinutes: Int = 30
    @State private var distanceKilometers: Double = 5.0
    @State private var provider: MusicProvider = .spotify

    enum ActivityType: String, CaseIterable { case walk, jog, run }
    enum Goal: String, CaseIterable { case none, time, distance }

    var body: some View {
        NavigationStack {
            VStack(spacing: 20) {
                Text("Pre-Run Setup")
                    .font(.title2)
                    .foregroundColor(.taqvoTextDark)

                Picker("Type", selection: $activityType) {
                    ForEach(ActivityType.allCases, id: \.self) { type in
                        Text(type.rawValue.capitalized)
                    }
                }
                .pickerStyle(.segmented)

                Picker("Goal", selection: $goal) {
                    ForEach(Goal.allCases, id: \.self) { g in
                        Text(g.rawValue.capitalized)
                    }
                }
                .pickerStyle(.segmented)
                .onChange(of: goal) { new in
                    storedGoalType = new.rawValue
                }

                // Goal value controls
                if goal == .time {
                    Stepper(value: $timeMinutes, in: 5...180, step: 5) {
                        Text("Time: \(timeMinutes) min")
                    }
                    .onChange(of: timeMinutes) { m in
                        storedGoalTimeSeconds = Double(m * 60)
                    }
                } else if goal == .distance {
                    Stepper(value: $distanceKilometers, in: 1...42.2, step: 0.5) {
                        Text(String(format: "Distance: %.1f km", distanceKilometers))
                    }
                    .onChange(of: distanceKilometers) { km in
                        storedGoalDistanceMeters = km * 1000.0
                    }
                }

                Toggle("Auto-pause", isOn: $trackingVM.autoPauseEnabled)
                    .tint(.taqvoCTA)

                Toggle("Auto-end on goal", isOn: $storedAutoEndOnGoal)
                    .tint(.taqvoCTA)

                Toggle("Auto-stop music on end", isOn: $storedAutoStopMusicOnEnd)
                    .tint(.taqvoCTA)

                // Provider toggle
                VStack(alignment: .leading, spacing: 8) {
                    Text("Music Provider")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Picker("Music Provider", selection: $provider) {
                        Text("Spotify").tag(MusicProvider.spotify)
                        Text("Apple Music").tag(MusicProvider.apple)
                    }
                    .pickerStyle(.segmented)
                    .onChange(of: provider) { p in
                        storedProviderString = p.rawValue
                    }
                }
                .onAppear {
                    provider = MusicProvider(rawValue: storedProviderString) ?? .spotify
                }

                Button {
                    switch goal {
                    case .none:
                        trackingVM.setTimeGoal(nil)
                        trackingVM.setDistanceGoal(nil)
                    case .time:
                        trackingVM.setTimeGoal(Double(timeMinutes * 60))
                        trackingVM.setDistanceGoal(nil)
                    case .distance:
                        trackingVM.setDistanceGoal(distanceKilometers * 1000.0)
                        trackingVM.setTimeGoal(nil)
                    }
                    trackingVM.autoEndOnGoal = storedAutoEndOnGoal
                    navigateToLive = true
                } label: {
                    Text("Start")
                        .font(.headline)
                        .foregroundColor(.black)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.taqvoCTA)
                        .cornerRadius(16)
                        .shadow(radius: 4)
                }
                .padding(.top, 8)

                // Connection and playlist UI gated by provider
                Divider().padding(.vertical, 4)
                if provider == .apple {
                    if musicVM.isAuthorized {
                        HStack {
                            Text("Apple Music Connected")
                                .foregroundColor(.taqvoAccentText)
                                .font(.subheadline)
                            Spacer()
                            Button {
                                showPlaylistPicker = true
                            } label: {
                                Text("Choose Playlist")
                                    .foregroundColor(.black)
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 8)
                                    .background(Color.taqvoCTA)
                                    .cornerRadius(10)
                            }
                        }
                    } else {
                        Button {
                            musicVM.requestAuthorization()
                        } label: {
                            Text("Connect Apple Music")
                                .foregroundColor(.black)
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(Color.taqvoCTA)
                                .cornerRadius(12)
                        }
                    }
                } else { // Spotify
                    if spotifyVM.isAuthorized {
                        HStack {
                            Text("Spotify Connected")
                                .foregroundColor(.taqvoAccentText)
                                .font(.subheadline)
                            Spacer()
                            Button {
                                showSpotifyPicker = true
                            } label: {
                                Text("Choose Playlist")
                                    .foregroundColor(.black)
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 8)
                                    .background(Color.taqvoCTA)
                                    .cornerRadius(10)
                            }
                        }
                    } else {
                        Button {
                            spotifyVM.connect()
                        } label: {
                            Text("Connect Spotify")
                                .foregroundColor(.black)
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(Color.taqvoCTA)
                                .cornerRadius(12)
                        }
                    }
                }
            }
            .padding()
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Activity")
            .onAppear {
                goal = Goal(rawValue: storedGoalType) ?? .none
                timeMinutes = max(5, min(180, Int(storedGoalTimeSeconds / 60)))
                distanceKilometers = max(1.0, min(42.2, storedGoalDistanceMeters / 1000.0))
                if musicVM.isAuthorized {
                    musicVM.startObserving()
                    musicVM.loadPlaylists()
                }
                if spotifyVM.isAuthorized {
                    Task { await spotifyVM.refreshState() }
                }
                provider = MusicProvider(rawValue: storedProviderString) ?? .spotify
            }
            .sheet(isPresented: $showPlaylistPicker) {
                PlaylistPickerView(musicVM: musicVM)
            }
            .sheet(isPresented: $showSpotifyPicker) {
                SpotifyPlaylistPickerView(spotifyVM: spotifyVM)
            }
            .navigationDestination(isPresented: $navigateToLive) {
                LiveActivityView().environmentObject(trackingVM)
            }
        }
    }
}

struct InsightsView: View {
    @EnvironmentObject var store: ActivityStore

    private func km(_ meters: Double) -> String {
        String(format: "%.2f km", meters/1000.0)
    }

    var body: some View {
        NavigationStack {
            Group {
                let summaries = store.weeklySummaries()
                if summaries.isEmpty {
                    VStack(spacing: 12) {
                        Text("No insights yet")
                            .font(.title3)
                            .foregroundColor(.taqvoTextDark)
                        Text("Share your runs to build weekly summaries.")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                            .multilineTextAlignment(.center)
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                } else {
                    VStack(spacing: 16) {
                        // Active streak metric
                        HStack {
                            Text("Streak")
                                .font(.caption)
                                .foregroundColor(.taqvoAccentText)
                            Spacer()
                            Text("\(store.activeDaysStreak()) days")
                                .font(.headline)
                                .foregroundColor(.taqvoTextDark)
                        }

                        WeeklyBarChart(weeks: Array(summaries.prefix(6).reversed()))
                            .frame(height: 160)
                            .padding(.vertical, 4)
                            .background(Color.black.opacity(0.08))
                            .cornerRadius(12)

                        List(summaries) { w in
                            WeeklySummaryCard(summary: w)
                                .listRowBackground(Color.black.opacity(0.08))
                        }
                        .listStyle(.plain)
                    }
                }
            }
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Insights")
        }
    }
}

struct WeeklyBarChart: View {
    let weeks: [WeeklySummary]

    private var maxDistance: Double {
        weeks.map { $0.totalDistanceMeters }.max() ?? 1
    }

    var body: some View {
        GeometryReader { geo in
            HStack(alignment: .bottom, spacing: 8) {
                ForEach(weeks, id: \.id) { w in
                    let ratio = CGFloat(w.totalDistanceMeters / maxDistance)
                    VStack {
                        RoundedRectangle(cornerRadius: 6)
                            .fill(Color.taqvoCTA)
                            .frame(width: (geo.size.width - 8 * CGFloat(weeks.count - 1)) / CGFloat(weeks.count), height: max(12, geo.size.height * ratio))
                        Text(String(format: "%.0f km", w.totalDistanceMeters/1000.0))
                            .font(.caption2)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                        Text(w.weekStart.formatted(.dateTime.month().day()))
                            .font(.caption2)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                    }
                }
            }
        }
    }
}

struct WeeklySummaryCard: View {
    let summary: WeeklySummary

    private var rangeText: String {
        let cal = Calendar(identifier: .iso8601)
        let end = cal.date(byAdding: .day, value: 6, to: summary.weekStart) ?? summary.weekStart
        let startStr = summary.weekStart.formatted(date: .abbreviated, time: .omitted)
        let endStr = end.formatted(date: .abbreviated, time: .omitted)
        return "\(startStr) – \(endStr)"
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text(rangeText)
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
                Spacer()
                Text(summary.averagePaceString)
                    .font(.subheadline)
                    .foregroundColor(.taqvoAccentText)
            }

            HStack {
                VStack(alignment: .leading) {
                    Text("Total Distance")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.2f km", summary.totalDistanceMeters/1000.0))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
                Spacer()
                VStack(alignment: .trailing) {
                    Text("Total Time")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(ActivityTrackingViewModel.formattedDuration(summary.totalDurationSeconds))
                        .font(.title3)
                        .foregroundColor(.taqvoTextDark)
                }
            }

            HStack {
                Text("Longest Run")
                    .font(.caption)
                    .foregroundColor(.taqvoAccentText)
                Spacer()
                Text(String(format: "%.2f km", summary.longestRunMeters/1000.0))
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
                Text(" • ")
                    .foregroundColor(.taqvoAccentText)
                Text(ActivityTrackingViewModel.formattedDuration(summary.longestRunDurationSeconds))
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
            }
        }
        .padding(.vertical, 8)
    }
}

struct ProfileView: View {
    var body: some View {
        NavigationStack {
            VStack(spacing: 16) {
                Text("Profile")
                    .font(.title)
                    .foregroundColor(.taqvoTextDark)
                Text("Integrations and privacy settings")
                    .foregroundColor(.taqvoAccentText)
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Profile")
        }
    }
}

#Preview {
    MainTabView()
}