//
//  OnboardingView.swift
//  Taqvo
//
//  Generated by Assistant on 10/17/25
//

import SwiftUI

struct OnboardingView: View {
    @EnvironmentObject var appState: AppState
    @StateObject private var permissionsVM = PermissionsViewModel()

    var body: some View {
        NavigationStack {
            VStack(spacing: 24) {
                VStack(spacing: 8) {
                    Text("Welcome to Taqvo")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(.taqvoTextDark)
                    Text("Minimal, motion-first tracking with community and insights.")
                        .font(.subheadline)
                        .foregroundColor(.taqvoAccentText)
                        .multilineTextAlignment(.center)
                }

                VStack(spacing: 12) {
                    permissionRow(
                        title: "Location",
                        subtitle: "Required for route tracking",
                        authorized: appState.locationAuthorized,
                        action: { permissionsVM.requestLocationAuthorization() }
                    )

                    permissionRow(
                        title: "Motion & Fitness",
                        subtitle: "Required for steps and cadence",
                        authorized: appState.motionAuthorized,
                        action: {
                            permissionsVM.requestMotionAuthorization { granted in
                                appState.motionAuthorized = granted
                            }
                        }
                    )

                    permissionRow(
                        title: "Apple Health (optional)",
                        subtitle: "Sync workouts and steps",
                        authorized: appState.healthAuthorized,
                        action: {
                            permissionsVM.requestHealthAuthorization { granted in
                                appState.healthAuthorized = granted
                            }
                        }
                    )

                    permissionRow(
                        title: "Background Tracking (optional)",
                        subtitle: "Keeps tracking if screen locks or you switch apps",
                        authorized: appState.backgroundTrackingEnabled,
                        action: {
                            permissionsVM.requestAlwaysAuthorization()
                        }
                    )
                }

                Button {
                    // Use current published states; avoid synchronous queries on main thread
                    appState.locationAuthorized = permissionsVM.locationAuthorizedState
                    appState.backgroundTrackingEnabled = permissionsVM.alwaysAuthorizedState
                    if appState.allRequiredPermissionsGranted {
                        appState.hasCompletedOnboarding = true
                    }
                } label: {
                    Text(appState.allRequiredPermissionsGranted ? "Continue" : "Enable Required Permissions")
                        .font(.headline)
                        .foregroundColor(.taqvoTextLight)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.taqvoCTA)
                        .cornerRadius(16)
                        .shadow(radius: 4)
                }
                .disabled(!appState.locationAuthorized)

                Text("You can manage privacy and integrations anytime in Profile.")
                    .foregroundColor(.taqvoAccentText)
                    .font(.caption)
            }
            .padding()
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(Color.taqvoBackgroundDark)
            .navigationTitle("Permissions")
            .onAppear {
                // Initialize current states from our view model callbacks to avoid blocking on main thread
                appState.locationAuthorized = permissionsVM.locationAuthorizedState
                appState.motionAuthorized = PermissionsViewModel.motionAuthorized()
                appState.healthAuthorized = PermissionsViewModel.healthAuthorized()
                appState.backgroundTrackingEnabled = permissionsVM.alwaysAuthorizedState

                // Auto-advance if required permissions are already granted
                if appState.allRequiredPermissionsGranted {
                    appState.hasCompletedOnboarding = true
                }
            }
            // Refresh when system authorization changes via our view model
            .onReceive(permissionsVM.$locationAuthorizedState) { authorized in
                appState.locationAuthorized = authorized
            }
            .onReceive(permissionsVM.$alwaysAuthorizedState) { authorizedAlways in
                appState.backgroundTrackingEnabled = authorizedAlways
            }
            // As a fallback, recheck after app becomes active (post-permission prompt)
            .onReceive(NotificationCenter.default.publisher(for: UIApplication.didBecomeActiveNotification)) { _ in
                // Use the latest published values rather than querying authorizationStatus on the main thread
                appState.locationAuthorized = permissionsVM.locationAuthorizedState
                appState.backgroundTrackingEnabled = permissionsVM.alwaysAuthorizedState
            }
        }
    }

    @ViewBuilder
    private func permissionRow(title: String, subtitle: String, authorized: Bool, action: @escaping () -> Void) -> some View {
        HStack(spacing: 12) {
            Image(systemName: authorized ? "checkmark.circle.fill" : "circle")
                .foregroundColor(authorized ? .taqvoCTA : .taqvoAccentText)
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.headline)
                    .foregroundColor(.taqvoTextDark)
                Text(subtitle)
                    .font(.caption)
                    .foregroundColor(.taqvoAccentText)
            }
            Spacer()
            Button(action: action) {
                Text(authorized ? "Enabled" : "Enable")
                    .font(.subheadline)
                    .foregroundColor(.taqvoTextLight)
                    .padding(.horizontal, 12)
                    .padding(.vertical, 8)
                    .background(Color.taqvoCTA)
                    .cornerRadius(12)
            }
            .disabled(authorized)
        }
        .padding()
        .background(Color.black.opacity(0.08))
        .cornerRadius(16)
    }
}

#Preview {
    OnboardingView()
        .environmentObject(AppState())
}