//
//  LiveActivityView.swift
//  Taqvo
//
//  Generated by Assistant on 10/17/25
//

import SwiftUI
import MapKit

struct LiveActivityView: View {
    @EnvironmentObject var vm: ActivityTrackingViewModel
    @Environment(\.dismiss) private var dismiss
    @EnvironmentObject var appState: AppState

    @State private var showSummary: Bool = false
    @State private var summary: ActivitySummary?
    @State private var showGoalAlert: Bool = false
    @StateObject private var musicVM = MusicViewModel()
    @State private var showPlaylistPicker: Bool = false
    @AppStorage("autoStopMusicOnEnd") private var autoStopMusicOnEnd: Bool = false
    @StateObject private var spotifyVM = SpotifyViewModel()
    @State private var showSpotifyPicker: Bool = false
    @AppStorage("preferredMusicProvider") private var storedProviderString: String = MusicProvider.spotify.rawValue
    @State private var provider: MusicProvider = .spotify

    var body: some View {
        VStack(spacing: 12) {
            if let challenge = appState.linkedChallengeTitle, !challenge.isEmpty {
                HStack(spacing: 8) {
                    Image(systemName: "flag.2.crossed")
                        .foregroundColor(.taqvoCTA)
                    Text(challenge)
                        .font(.subheadline)
                        .foregroundColor(.taqvoTextDark)
                        .lineLimit(1)
                    Spacer()
                }
                .padding(.horizontal, 2)
            }

            MapRouteView(route: vm.routeCoordinates)
                .frame(height: 260)
                .clipShape(RoundedRectangle(cornerRadius: 16))

            HStack(spacing: 16) {
                VStack(alignment: .leading) {
                    Text("Distance")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(String(format: "%.2f km", vm.distanceMeters / 1000.0))
                        .font(.title3).bold()
                }
                Spacer()
                VStack(alignment: .trailing) {
                    Text("Duration")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Text(timeString(vm.durationSeconds))
                        .font(.title3).bold()
                }
            }

            if vm.timeGoalSeconds != nil || vm.distanceGoalMeters != nil {
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Text("Goal")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Spacer()
                        Text(vm.goalProgressText())
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                    }
                    ProgressView(value: vm.goalProgressFraction())
                        .tint(.taqvoCTA)
                    HStack {
                        Text("Remaining")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                        Spacer()
                        Text(vm.goalRemainingEstimateText())
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                    }
                    if vm.distanceGoalMeters != nil {
                        HStack {
                            Text("Est. Finish")
                                .font(.caption)
                                .foregroundColor(.taqvoAccentText)
                            Spacer()
                            Text(vm.goalEstimatedFinishTimeText())
                                .font(.caption)
                                .foregroundColor(.taqvoAccentText)
                                .lineLimit(1)
                        }
                    }
                }
                .padding(.vertical, 4)
            }

            // Music controls
            VStack(alignment: .leading, spacing: 6) {
                HStack {
                    Text("Music")
                        .font(.caption)
                        .foregroundColor(.taqvoAccentText)
                    Spacer()
                    if provider == .spotify, spotifyVM.isAuthorized {
                        Text("\(spotifyVM.currentTitle)\(spotifyVM.currentArtist.isEmpty ? "" : " • \(spotifyVM.currentArtist)")")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                    } else if provider == .apple, musicVM.isAuthorized {
                        Text("\(musicVM.currentTitle)\(musicVM.currentArtist.isEmpty ? "" : " • \(musicVM.currentArtist)")")
                            .font(.caption)
                            .foregroundColor(.taqvoAccentText)
                            .lineLimit(1)
                    }
                }


                if provider == .spotify {
                    if spotifyVM.isAuthorized {
                        HStack(spacing: 8) {
                            Button {
                                Task { await spotifyVM.togglePlayPause() }
                            } label: {
                                Image(systemName: spotifyVM.isPlaying ? "pause.fill" : "play.fill")
                                    .foregroundColor(.taqvoTextLight)
                                    .frame(maxWidth: .infinity)
                                    .padding(.vertical, 10)
                                    .background(Color.taqvoCTA)
                                    .clipShape(RoundedRectangle(cornerRadius: 10))
                            }
                            Button {
                                Task { await spotifyVM.stopPlayback() }
                            } label: {
                                Image(systemName: "stop.fill")
                                    .foregroundColor(.taqvoTextLight)
                                    .frame(maxWidth: .infinity)
                                    .padding(.vertical, 10)
                                    .background(Color.taqvoCTA)
                                    .clipShape(RoundedRectangle(cornerRadius: 10))
                            }
                            Button {
                                showSpotifyPicker = true
                            } label: {
                                Text("Playlist")
                                    .foregroundColor(.taqvoTextLight)
                                    .frame(maxWidth: .infinity)
                                    .padding(.vertical, 10)
                                    .background(Color.taqvoCTA.opacity(0.8))
                                    .clipShape(RoundedRectangle(cornerRadius: 10))
                            }
                        }
                    } else {
                        Button {
                            spotifyVM.connect()
                        } label: {
                            Text("Connect Spotify")
                                .foregroundColor(.taqvoTextLight)
                                .frame(maxWidth: .infinity)
                                .padding(.vertical, 10)
                                .background(Color.taqvoCTA)
                                .clipShape(RoundedRectangle(cornerRadius: 10))
                        }
                    }
                } else {
                    if musicVM.isAuthorized {
                        HStack(spacing: 8) {
                            Button {
                                musicVM.togglePlayPause()
                            } label: {
                                Image(systemName: musicVM.isPlaying ? "pause.fill" : "play.fill")
                                    .foregroundColor(.taqvoTextLight)
                                    .frame(maxWidth: .infinity)
                                    .padding(.vertical, 10)
                                    .background(Color.taqvoCTA)
                                    .clipShape(RoundedRectangle(cornerRadius: 10))
                            }
                            Button {
                                musicVM.stopPlayback()
                            } label: {
                                Image(systemName: "stop.fill")
                                    .foregroundColor(.taqvoTextLight)
                                    .frame(maxWidth: .infinity)
                                    .padding(.vertical, 10)
                                    .background(Color.taqvoCTA)
                                    .clipShape(RoundedRectangle(cornerRadius: 10))
                            }
                            Button {
                                showPlaylistPicker = true
                            } label: {
                                Text("Playlist")
                                    .foregroundColor(.taqvoTextLight)
                                    .frame(maxWidth: .infinity)
                                    .padding(.vertical, 10)
                                    .background(Color.taqvoCTA.opacity(0.8))
                                    .clipShape(RoundedRectangle(cornerRadius: 10))
                            }
                        }
                    } else {
                        Button {
                            musicVM.requestAuthorization()
                        } label: {
                            Text("Connect Apple Music")
                                .foregroundColor(.taqvoTextLight)
                                .frame(maxWidth: .infinity)
                                .padding(.vertical, 10)
                                .background(Color.taqvoCTA.opacity(0.85))
                                .clipShape(RoundedRectangle(cornerRadius: 10))
                        }
                    }
                }
            }

            HStack(spacing: 12) {
                if vm.isRunning {
                    Button {
                        vm.pause()
                    } label: {
                        Text("Pause")
                            .foregroundColor(.taqvoTextLight)
                            .frame(maxWidth: .infinity)
                            .padding(.vertical, 12)
                            .background(Color.orange)
                            .clipShape(RoundedRectangle(cornerRadius: 12))
                    }
                } else if vm.hasSession {
                    Button {
                        vm.resume()
                    } label: {
                        Text("Resume")
                            .foregroundColor(.taqvoTextLight)
                            .frame(maxWidth: .infinity)
                            .padding(.vertical, 12)
                            .background(Color.green)
                            .clipShape(RoundedRectangle(cornerRadius: 12))
                    }
                }

                Button {
                    // Build summary first, then present sheet to avoid blank content
                    summary = vm.summary()
                    vm.stop()
                    if autoStopMusicOnEnd {
                        if provider == .spotify {
                            Task { await spotifyVM.stopPlayback() }
                        } else {
                            musicVM.stopPlayback()
                        }
                    }
                    showSummary = true
                } label: {
                    Text("Stop")
                        .foregroundColor(.taqvoTextDark)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 12)
                        .background(Color.red)
                        .clipShape(RoundedRectangle(cornerRadius: 12))
                }
                .disabled(!vm.hasSession)
            }
        }
        .padding()
        .navigationTitle(appState.linkedChallengeTitle ?? "Live Activity")
        .sheet(isPresented: $showSummary, onDismiss: {
            // After summary, leave live view
            appState.linkedChallengeTitle = nil
            appState.linkedChallengeIsPublic = nil
            dismiss()
        }) {
            // Always render summary content; fall back to current vm state if needed
            PostRunSummaryView(summary: (summary ?? vm.summary()).withChallenge(title: appState.linkedChallengeTitle, isPublic: appState.linkedChallengeIsPublic))
        }
        .sheet(isPresented: $showPlaylistPicker) {
            PlaylistPickerView(musicVM: musicVM)
        }
        .sheet(isPresented: $showSpotifyPicker) {
            SpotifyPlaylistPickerView(spotifyVM: spotifyVM)
        }
        // Updated onAppear to auto-detect active provider and persist it
        .onAppear {
            if !vm.isRunning && !vm.hasSession {
                vm.start()
            }
            if musicVM.isAuthorized {
                musicVM.startObserving()
                musicVM.loadPlaylists()
            }
            Task {
                if spotifyVM.isAuthorized {
                    await spotifyVM.refreshState()
                }
                await MainActor.run {
                    var chosen = MusicProvider(rawValue: storedProviderString) ?? .spotify
                    if musicVM.isAuthorized && musicVM.isPlaying {
                        chosen = .apple
                    } else if spotifyVM.isAuthorized && spotifyVM.isPlaying {
                        chosen = .spotify
                    } else if chosen == .spotify && !spotifyVM.isAuthorized && musicVM.isAuthorized {
                        chosen = .apple
                    } else if chosen == .apple && !musicVM.isAuthorized && spotifyVM.isAuthorized {
                        chosen = .spotify
                    }
                    provider = chosen
                    storedProviderString = chosen.rawValue
                }
            }
        }
        // Switch provider automatically if playback starts on either service
        .onChange(of: musicVM.isPlaying) { _, playing in
            if playing {
                provider = .apple
                storedProviderString = provider.rawValue
            }
        }
        .onChange(of: spotifyVM.isPlaying) { _, playing in
            if playing {
                provider = .spotify
                storedProviderString = provider.rawValue
            }
        }
        .onChange(of: vm.goalReached) { _, reached in
            if reached {
                if vm.autoEndOnGoal {
                    summary = vm.summary()
                    vm.stop()
                    if autoStopMusicOnEnd {
                        if provider == .spotify {
                            Task { await spotifyVM.stopPlayback() }
                        } else {
                            musicVM.stopPlayback()
                        }
                    }
                    showSummary = true
                } else {
                    showGoalAlert = true
                }
            }
        }
        .alert("Goal reached", isPresented: $showGoalAlert) {
            Button("End Activity", role: .destructive) {
                summary = vm.summary().withChallenge(title: appState.linkedChallengeTitle, isPublic: appState.linkedChallengeIsPublic)
                vm.stop()
                if autoStopMusicOnEnd {
                    if provider == .spotify {
                        Task { await spotifyVM.stopPlayback() }
                    } else {
                        musicVM.stopPlayback()
                    }
                }
                showSummary = true
            }
            Button("Continue", role: .cancel) {
                showGoalAlert = false
            }
        } message: {
            Text("You reached your goal. End the run?")
        }
        .onDisappear {
            // Safety: clear link if user backs out without stopping
            appState.linkedChallengeTitle = nil
            appState.linkedChallengeIsPublic = nil
        }
    }

    private func timeString(_ seconds: Double) -> String {
        let s = Int(seconds)
        let h = s / 3600
        let m = (s % 3600) / 60
        let sec = s % 60
        if h > 0 {
            return String(format: "%d:%02d:%02d", h, m, sec)
        } else {
            return String(format: "%02d:%02d", m, sec)
        }
    }
}

#Preview {
    LiveActivityView()
        .environmentObject(ActivityTrackingViewModel())
}