//
//  LiveActivityView.swift
//  Taqvo
//
//  Generated by Assistant on 10/17/25
//

import SwiftUI
import MapKit
import PhotosUI

struct LiveActivityView: View {
    @EnvironmentObject var vm: ActivityTrackingViewModel
    @Environment(\.dismiss) private var dismiss
    @EnvironmentObject var appState: AppState

    @State private var showSummary: Bool = false
    @State private var summary: ActivitySummary?
    @State private var showGoalAlert: Bool = false
    @StateObject private var musicVM = MusicViewModel()
    @State private var showPlaylistPicker: Bool = false
    @AppStorage("autoStopMusicOnEnd") private var autoStopMusicOnEnd: Bool = false
    @StateObject private var spotifyVM = SpotifyViewModel()
    @State private var showSpotifyPicker: Bool = false
    @AppStorage("preferredMusicProvider") private var storedProviderString: String = MusicProvider.spotify.rawValue
    @State private var provider: MusicProvider = .spotify
    @State private var showMetricsPanel: Bool = false
    @State private var mapExpanded: Bool = false
    @State private var showAddMarkerSheet: Bool = false
    @State private var markerNote: String = ""
    @State private var markerPhotoItem: PhotosPickerItem? = nil
    @State private var markerPhoto: UIImage? = nil
    @State private var showMiniPlayer: Bool = false

    var body: some View {
        ZStack(alignment: .top) {
            // Background
            Color.black
                .ignoresSafeArea()
            
            // Map
            MapRouteView(route: vm.routeCoordinates, markers: vm.markers)
                .ignoresSafeArea()
            
            // Content overlay
            VStack(spacing: 0) {
                // Header (no background - map shows through)
                newHeaderSection
                
                Spacer()
                
                // Bottom section with gradient
                VStack(spacing: 0) {
                    bottomStatsSection
                    
                    Button {
                        withAnimation(.spring(response: 0.3)) {
                            showMetricsPanel.toggle()
                        }
                    } label: {
                        Image(systemName: showMetricsPanel ? "chevron.up" : "chevron.down")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(Color(hex: "#BDF266"))
                            .padding(.top, 8)
                            .padding(.bottom, showMetricsPanel ? 16 : 32)
                    }
                    
                    if showMetricsPanel {
                        expandableMetricsContent
                            .padding(.bottom, 24)
                    }
                    
                    actionButtonsSection
                        .padding(.top, showMetricsPanel ? 0 : 24)
                }
                .background(
                    LinearGradient(
                        colors: [
                            Color.black.opacity(0.4),
                            Color.black.opacity(0.9),
                            Color.black
                        ],
                        startPoint: .top,
                        endPoint: .bottom
                    )
                )
            }
        }
        .navigationBarHidden(true)
        .sheet(isPresented: $showSummary, onDismiss: {
            dismiss()
        }) {
            PostRunSummaryView(summary: (summary ?? vm.summary()).withChallenge(title: appState.linkedChallengeTitle, isPublic: appState.linkedChallengeIsPublic))
        }
        .sheet(isPresented: $showPlaylistPicker) {
            PlaylistPickerView(musicVM: musicVM)
        }
        .sheet(isPresented: $showSpotifyPicker) {
            SpotifyPlaylistPickerView(spotifyVM: spotifyVM)
        }
        .sheet(isPresented: $showAddMarkerSheet) {
            addMarkerSheet
        }
        .sheet(isPresented: $showMiniPlayer) {
            MiniMusicPlayerView(musicVM: musicVM, spotifyVM: spotifyVM)
                .presentationDetents([.height(350)])
                .presentationDragIndicator(.visible)
                .presentationBackground(Color(hex: "#1D1F25"))
        }
        .onChange(of: markerPhotoItem) { _, item in
            guard let item = item else { return }
            Task {
                if let data = try? await item.loadTransferable(type: Data.self), let img = UIImage(data: data) {
                    await MainActor.run { self.markerPhoto = img }
                }
            }
        }
        .onAppear {
            setupOnAppear()
        }
        .onChange(of: musicVM.isPlaying) { _, playing in
            if playing {
                provider = .apple
                storedProviderString = provider.rawValue
            }
        }
        .onChange(of: spotifyVM.isPlaying) { _, playing in
            if playing {
                provider = .spotify
                storedProviderString = provider.rawValue
            }
        }
        .onChange(of: vm.goalReached) { _, reached in
            handleGoalReached(reached)
        }
        .alert("Goal reached", isPresented: $showGoalAlert) {
            Button("End Activity", role: .destructive) {
                endActivity()
            }
            Button("Continue", role: .cancel) {
                showGoalAlert = false
            }
        } message: {
            Text("You reached your goal. End the run?")
        }
        .onDisappear {
            appState.linkedChallengeTitle = nil
            appState.linkedChallengeIsPublic = nil
        }
    }
    
    // MARK: - New Figma Design Components
    
    private var newHeaderSection: some View {
        HStack(alignment: .center) {
            // Back button
            Button {
                dismiss()
            } label: {
                Image(systemName: "chevron.left")
                    .font(.system(size: 20, weight: .medium))
                    .foregroundColor(.black)
                    .frame(width: 48, height: 48)
                    .background(Color.taqvoCTA)
                    .clipShape(Circle())
            }
            
            Spacer()
            
            // Duration Display
            Text(timeString(vm.durationSeconds))
                .font(.system(size: 64, weight: .bold))
                .foregroundColor(Color(hex: "#BDF266"))
                .tracking(-1.28)
                .monospacedDigit()
                .overlay(alignment: .bottom) {
                    Text("Duration")
                        .font(.system(size: 15, weight: .medium))
                        .foregroundColor(.white.opacity(0.6))
                        .offset(y: 20)
                }
            
            Spacer()
            
            // Menu/Music button
            Button {
                showMiniPlayer = true
            } label: {
                Image(systemName: "music.note")
                    .font(.system(size: 20, weight: .medium))
                    .foregroundColor(.black)
                    .frame(width: 48, height: 48)
                    .background(Color.taqvoCTA)
                    .clipShape(Circle())
            }
        }
        .padding(.horizontal, 24)
        .padding(.top, 8)
    }
    
    private var centeredDurationSection: some View {
        VStack(spacing: 8) {
            Text(timeString(vm.durationSeconds))
                .font(.system(size: 96, weight: .bold))
                .foregroundColor(Color(hex: "#BDF266"))
                .tracking(-1.92)
                .lineLimit(1)
                .minimumScaleFactor(0.7)
            
            Text("Duration")
                .font(.system(size: 24, weight: .medium))
                .foregroundColor(.white)
                .tracking(-0.48)
        }
        .frame(maxWidth: 192)
    }
    
    private var bottomStatsSection: some View {
        HStack(spacing: 12) {
            // Distance
            statCard(
                value: String(format: "%.2f", vm.distanceMeters / 1000.0),
                label: "km"
            )
            
            // Calories
            statCard(
                value: String(format: "%.0f", estimatedCalories()),
                label: "kcal"
            )
            
            // Steps
            statCard(
                value: String(vm.totalSteps),
                label: "Steps"
            )
        }
        .padding(.horizontal, 16)
        .padding(.top, 24)
        .padding(.bottom, 8)
    }
    
    private func statCard(value: String, label: String) -> some View {
        VStack(spacing: 8) {
            Text(value)
                .font(.system(size: 28, weight: .bold))
                .foregroundColor(.white)
                .tracking(-0.84)
                .monospacedDigit()
            
            Text(label)
                .font(.system(size: 20, weight: .medium))
                .foregroundColor(.gray)
                .tracking(-0.6)
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 16)
        .background(Color.white.opacity(0.05))
        .cornerRadius(12)
    }
    
    private var expandableMetricsContent: some View {
        VStack(spacing: 12) {
            HStack(spacing: 12) {
                metricCard(
                    icon: "speedometer",
                    value: ActivityTrackingViewModel.formattedPace(distanceMeters: vm.distanceMeters, durationSeconds: vm.durationSeconds),
                    label: "Pace"
                )
                
                metricCard(
                    icon: "figure.walk",
                    value: vm.currentCadenceSPM.map { String(format: "%.0f", $0) } ?? "â€”",
                    label: "Cadence"
                )
                
                metricCard(
                    icon: "mountain.2.fill",
                    value: String(format: "%.0f", max(0, vm.elevationGainMeters)),
                    label: "Elevation"
                )
            }
        }
        .padding(.horizontal, 16)
    }
    
    private func metricCard(icon: String, value: String, label: String) -> some View {
        VStack(spacing: 8) {
            Text(value)
                .font(.system(size: 28, weight: .bold))
                .foregroundColor(.white)
                .tracking(-0.84)
                .monospacedDigit()
                .lineLimit(1)
                .minimumScaleFactor(0.8)
            
            Text(label)
                .font(.system(size: 20, weight: .medium))
                .foregroundColor(.gray)
                .tracking(-0.6)
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 12)
        .background(Color.white.opacity(0.05))
        .cornerRadius(12)
    }
    
    private var actionButtonsSection: some View {
        HStack(spacing: 16) {
            // Pause/Resume button
            if vm.isRunning {
                Button {
                    vm.pause()
                } label: {
                    Text("PAUSE")
                        .font(.system(size: 14, weight: .bold))
                        .foregroundColor(.black)
                        .tracking(-0.28)
                        .frame(maxWidth: .infinity)
                        .frame(height: 45)
                        .background(.white)
                        .cornerRadius(30)
                }
            } else if vm.hasSession {
                Button {
                    vm.resume()
                } label: {
                    Text("RESUME")
                        .font(.system(size: 14, weight: .bold))
                        .foregroundColor(.black)
                        .tracking(-0.28)
                        .frame(maxWidth: .infinity)
                        .frame(height: 45)
                        .background(.white)
                        .cornerRadius(30)
                }
            }
            
            // Stop button
            Button {
                summary = vm.summary()
                vm.stop()
                if autoStopMusicOnEnd {
                    if provider == .spotify {
                        Task { await spotifyVM.stopPlayback() }
                    } else {
                        musicVM.stopPlayback()
                    }
                }
                showSummary = true
            } label: {
                Text("STOP")
                    .font(.system(size: 14, weight: .bold))
                    .foregroundColor(.black)
                    .tracking(-0.28)
                    .frame(maxWidth: .infinity)
                    .frame(height: 45)
                    .background(Color(hex: "#BDF266"))
                    .cornerRadius(30)
            }
            .disabled(!vm.hasSession)
        }
        .padding(.horizontal, 24)
        .padding(.bottom, 24)
    }
    
    @ViewBuilder
    private var challengeSection: some View {
        if let challenge = appState.linkedChallengeTitle, !challenge.isEmpty {
            HStack(spacing: 12) {
                Image(systemName: "flag.2.crossed")
                    .foregroundColor(.taqvoCTA)
                    .font(.system(size: 16))
                Text(challenge)
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.white.opacity(0.8))
                    .lineLimit(1)
                Spacer()
            }
            .padding(.horizontal, 24)
            .padding(.top, 16)
        }
    }
    
    private var modernMapSection: some View {
        ZStack(alignment: .topTrailing) {
            MapRouteView(route: vm.routeCoordinates, markers: vm.markers)
                .frame(height: 300)
                .clipShape(RoundedRectangle(cornerRadius: 16))

            HStack(spacing: 12) {
                Button {
                    withAnimation(.easeInOut(duration: 0.3)) { mapExpanded.toggle() }
                } label: {
                    Image(systemName: mapExpanded ? "arrow.down.right.and.arrow.up.left" : "arrow.up.left.and.arrow.down.right")
                        .font(.system(size: 14, weight: .medium))
                        .foregroundColor(.white)
                        .frame(width: 36, height: 36)
                        .background(Color.black.opacity(0.7))
                        .clipShape(Circle())
                }
                Button {
                    showAddMarkerSheet = true
                } label: {
                    Image(systemName: "mappin.and.ellipse")
                        .font(.system(size: 14, weight: .medium))
                        .foregroundColor(.white)
                        .frame(width: 36, height: 36)
                        .background(Color.black.opacity(0.7))
                        .clipShape(Circle())
                }
            }
            .padding(12)
        }
        .padding(.horizontal, 16)
    }
    
    private var modernMetricsSection: some View {
        VStack(spacing: 12) {
            // Main metric - Distance (large)
            VStack(spacing: 4) {
                Text("Distance")
                    .font(.system(size: 13, weight: .medium))
                    .foregroundColor(.taqvoAccentText)
                Text(String(format: "%.2f", vm.distanceMeters / 1000.0))
                    .font(.system(size: 56, weight: .bold))
                    .foregroundColor(.taqvoTextDark)
                Text("km")
                    .font(.system(size: 16))
                    .foregroundColor(.taqvoAccentText)
            }
            .padding(.vertical, 20)
            
            // Secondary metrics
            HStack(spacing: 12) {
                modernMetricCard(
                    label: "Pace",
                    value: ActivityTrackingViewModel.formattedPace(distanceMeters: vm.distanceMeters, durationSeconds: vm.durationSeconds),
                    icon: "speedometer"
                )
                
                modernMetricCard(
                    label: "Duration",
                    value: timeString(vm.durationSeconds),
                    icon: "clock.fill"
                )
            }
        }
        .padding(.horizontal, 16)
    }
    
    private func modernMetricCard(label: String, value: String, icon: String) -> some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.system(size: 20))
                .foregroundColor(.taqvoCTA)
            
            Text(value)
                .font(.system(size: 24, weight: .bold))
                .foregroundColor(.taqvoTextDark)
            
            Text(label)
                .font(.system(size: 12))
                .foregroundColor(.taqvoAccentText)
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 20)
        .background(Color.black.opacity(0.2))
        .cornerRadius(16)
    }
    
    @ViewBuilder
    private var goalProgressSection: some View {
        if vm.timeGoalSeconds != nil || vm.distanceGoalMeters != nil {
            VStack(spacing: 16) {
                HStack {
                    Text("Goal Progress")
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(.white.opacity(0.7))
                    Spacer()
                    Text(vm.goalProgressText())
                        .font(.system(size: 14, weight: .medium))
                        .foregroundColor(.white.opacity(0.8))
                        .lineLimit(1)
                }
                
                ProgressView(value: vm.goalProgressFraction())
                    .tint(.taqvoCTA)
                    .scaleEffect(y: 1.5)
                
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Remaining")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(.white.opacity(0.6))
                        Text(vm.goalRemainingEstimateText())
                            .font(.system(size: 14, weight: .medium))
                            .foregroundColor(.white)
                            .lineLimit(1)
                    }
                    
                    Spacer()
                    
                    if vm.distanceGoalMeters != nil {
                        VStack(alignment: .trailing, spacing: 4) {
                            Text("Est. Finish")
                                .font(.system(size: 12, weight: .medium))
                                .foregroundColor(.white.opacity(0.6))
                            Text(vm.goalEstimatedFinishTimeText())
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(.white)
                                .lineLimit(1)
                        }
                    }
                }
            }
            .padding(20)
            .background(Color.white.opacity(0.05))
            .cornerRadius(16)
            .padding(.horizontal, 24)
        }
    }
    
    private var musicControlsSection: some View {
        VStack(spacing: 16) {
            musicHeaderSection
            musicProviderButtons
            musicPlaybackControls
        }
        .padding(20)
        .background(Color.white.opacity(0.05))
        .cornerRadius(16)
        .padding(.horizontal, 24)
    }
    
    private var musicHeaderSection: some View {
        HStack {
            Text("Music")
                .font(.system(size: 16, weight: .medium))
                .foregroundColor(.white.opacity(0.7))
            Spacer()
            currentTrackInfo
        }
    }
    
    @ViewBuilder
    private var currentTrackInfo: some View {
        if provider == .spotify, spotifyVM.isAuthorized {
            Text("\(spotifyVM.currentTitle)\(spotifyVM.currentArtist.isEmpty ? "" : " â€¢ \(spotifyVM.currentArtist)")")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.white.opacity(0.8))
                .lineLimit(1)
        } else if provider == .apple, musicVM.isAuthorized {
            Text("\(musicVM.currentTitle)\(musicVM.currentArtist.isEmpty ? "" : " â€¢ \(musicVM.currentArtist)")")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.white.opacity(0.8))
                .lineLimit(1)
        }
    }
    
    private var musicProviderButtons: some View {
        HStack(spacing: 12) {
            spotifyProviderButton
            appleMusicProviderButton
        }
    }
    
    private var spotifyProviderButton: some View {
        Button(action: {
            if provider == .spotify {
                if spotifyVM.isAuthorized {
                    showSpotifyPicker = true
                } else {
                    spotifyVM.connect()
                }
            } else {
                provider = .spotify
            }
        }) {
            HStack(spacing: 6) {
                Image(systemName: "music.note")
                    .font(.system(size: 12, weight: .medium))
                    .foregroundColor(provider == .spotify ? .green : .white.opacity(0.7))
                Text(provider == .spotify ? (spotifyVM.isAuthorized ? "Spotify" : "Connect Spotify") : "Connect Spotify")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(provider == .spotify ? .green : .white.opacity(0.7))
                    .underline(provider == .spotify)
            }
            .padding(.horizontal, 8)
            .padding(.vertical, 6)
        }
    }
    
    private var appleMusicProviderButton: some View {
        Button(action: {
            if provider == .apple {
                if musicVM.isAuthorized {
                    showPlaylistPicker = true
                } else {
                    musicVM.requestAuthorization()
                }
            } else {
                provider = .apple
            }
        }) {
            HStack(spacing: 6) {
                Image(systemName: "music.note")
                    .font(.system(size: 12, weight: .medium))
                    .foregroundColor(provider == .apple ? .orange : .white.opacity(0.7))
                Text(provider == .apple ? (musicVM.isAuthorized ? "Apple Music" : "Connect Apple Music") : "Connect Apple Music")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(provider == .apple ? .orange : .white.opacity(0.7))
                    .underline(provider == .apple)
            }
            .padding(.horizontal, 8)
            .padding(.vertical, 6)
        }
    }
    
    @ViewBuilder
    private var musicPlaybackControls: some View {
        if provider == .spotify {
            if spotifyVM.isAuthorized {
                spotifyPlaybackControls
            }
        } else {
            if musicVM.isAuthorized {
                appleMusicPlaybackControls
            }
        }
    }
    
    private var spotifyPlaybackControls: some View {
        HStack(spacing: 8) {
            Button {
                Task { await spotifyVM.togglePlayPause() }
            } label: {
                Image(systemName: spotifyVM.isPlaying ? "pause.fill" : "play.fill")
                    .foregroundColor(.taqvoTextLight)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 10)
                    .background(Color.taqvoCTA)
                    .clipShape(RoundedRectangle(cornerRadius: 10))
            }
            Button {
                Task { await spotifyVM.stopPlayback() }
            } label: {
                Image(systemName: "stop.fill")
                    .foregroundColor(.taqvoTextLight)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 10)
                    .background(Color.taqvoCTA)
                    .clipShape(RoundedRectangle(cornerRadius: 10))
            }
        }
    }
    
    private var appleMusicPlaybackControls: some View {
        HStack(spacing: 8) {
            Button {
                musicVM.togglePlayPause()
            } label: {
                Image(systemName: musicVM.isPlaying ? "pause.fill" : "play.fill")
                    .foregroundColor(.taqvoTextLight)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 10)
                    .background(Color.taqvoCTA)
                    .clipShape(RoundedRectangle(cornerRadius: 10))
            }
            Button {
                musicVM.stopPlayback()
            } label: {
                Image(systemName: "stop.fill")
                    .foregroundColor(.taqvoTextLight)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 10)
                    .background(Color.taqvoCTA)
                    .clipShape(RoundedRectangle(cornerRadius: 10))
            }
        }
    }
    
    private var modernControlsSection: some View {
        VStack(spacing: 0) {
            Divider()
                .background(Color.gray.opacity(0.3))
            
            HStack(spacing: 12) {
                if vm.isRunning {
                    Button(action: {
                        vm.pause()
                    }) {
                        HStack(spacing: 8) {
                            Image(systemName: "pause.fill")
                                .font(.system(size: 18))
                            Text("Pause")
                                .font(.system(size: 17, weight: .semibold))
                        }
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 18)
                        .background(Color.orange)
                        .cornerRadius(14)
                    }
                } else if vm.hasSession {
                    Button(action: {
                        vm.resume()
                    }) {
                        HStack(spacing: 8) {
                            Image(systemName: "play.fill")
                                .font(.system(size: 18))
                            Text("Resume")
                                .font(.system(size: 17, weight: .semibold))
                        }
                        .foregroundColor(.black)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 18)
                        .background(Color.taqvoCTA)
                        .cornerRadius(14)
                    }
                }
                
                Button(action: {
                    summary = vm.summary()
                    vm.stop()
                    if autoStopMusicOnEnd {
                        if provider == .spotify {
                            Task { await spotifyVM.stopPlayback() }
                        } else {
                            musicVM.stopPlayback()
                        }
                    }
                    showSummary = true
                }) {
                    HStack(spacing: 8) {
                        Image(systemName: "stop.fill")
                            .font(.system(size: 18))
                        Text("Stop")
                            .font(.system(size: 17, weight: .semibold))
                    }
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 18)
                    .background(Color.red)
                    .cornerRadius(14)
                }
                .disabled(!vm.hasSession)
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 16)
            .background(Color.taqvoBackgroundDark)
        }
    }

    
    private var addMarkerSheet: some View {
        NavigationView {
            Form {
                Section(header: Text("Note")) {
                    TextField("Optional note", text: $markerNote)
                }
                Section(header: Text("Photo")) {
                    PhotosPicker(selection: $markerPhotoItem, matching: .images) {
                        HStack {
                            Image(systemName: "photo")
                            Text(markerPhoto == nil ? "Choose Photo" : "Change Photo")
                        }
                    }
                    if let img = markerPhoto {
                        Image(uiImage: img)
                            .resizable()
                            .scaledToFit()
                            .frame(maxHeight: 180)
                            .clipShape(RoundedRectangle(cornerRadius: 12))
                    }
                }
            }
            .navigationTitle("Add Marker")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") { showAddMarkerSheet = false }
                }
                ToolbarItem(placement: .confirmationAction) {
                    Button("Save") {
                        vm.addMarker(note: markerNote, photo: markerPhoto)
                        markerNote = ""
                        markerPhoto = nil
                        markerPhotoItem = nil
                        showAddMarkerSheet = false
                    }
                    .disabled(!vm.hasSession)
                }
            }
        }
    }
    
    // MARK: - Helper Methods
    
    private func setupOnAppear() {
        if !vm.isRunning && !vm.hasSession {
            vm.start()
        }
        if musicVM.isAuthorized {
            musicVM.startObserving()
            musicVM.loadPlaylists()
        }
        Task {
            if spotifyVM.isAuthorized {
                await spotifyVM.refreshState()
            }
            await MainActor.run {
                var chosen = MusicProvider(rawValue: storedProviderString) ?? .spotify
                if musicVM.isAuthorized && musicVM.isPlaying {
                    chosen = .apple
                } else if spotifyVM.isAuthorized && spotifyVM.isPlaying {
                    chosen = .spotify
                } else if chosen == .spotify && !spotifyVM.isAuthorized && musicVM.isAuthorized {
                    chosen = .apple
                } else if chosen == .apple && !musicVM.isAuthorized && spotifyVM.isAuthorized {
                    chosen = .spotify
                }
                provider = chosen
                storedProviderString = chosen.rawValue
            }
        }
    }
    
    private func handleGoalReached(_ reached: Bool) {
        if reached {
            if vm.autoEndOnGoal {
                endActivity()
            } else {
                showGoalAlert = true
            }
        }
    }
    
    private func endActivity() {
        summary = vm.summary().withChallenge(title: appState.linkedChallengeTitle, isPublic: appState.linkedChallengeIsPublic)
        vm.stop()
        if autoStopMusicOnEnd {
            if provider == .spotify {
                Task { await spotifyVM.stopPlayback() }
            } else {
                musicVM.stopPlayback()
            }
        }
        showSummary = true
    }
    
    private func timeString(_ seconds: Double) -> String {
        let s = Int(seconds)
        let h = s / 3600
        let m = (s % 3600) / 60
        let sec = s % 60
        if h > 0 { return String(format: "%d:%02d:%02d", h, m, sec) }
        return String(format: "%02d:%02d", m, sec)
    }
    
    
    // MARK: - Metric Calculations
    
    private func estimatedCalories() -> Double {
        let met: Double
        switch vm.activityKind {
        case .walk: met = 3.5
        case .run: met = 9.8
        case .trailRun: met = 7.5
        case .hiking: met = 6.0
        }
        let weightKg: Double = 70
        let minutes = max(vm.durationSeconds, 0) / 60.0
        let kcal = met * 3.5 * weightKg / 200.0 * minutes
        return max(kcal, 0)
    }
    
}

// MARK: - View Extensions
extension View {
    func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {
        clipShape(RoundedCorner(radius: radius, corners: corners))
    }
}

struct RoundedCorner: Shape {
    var radius: CGFloat = .infinity
    var corners: UIRectCorner = .allCorners

    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath(
            roundedRect: rect,
            byRoundingCorners: corners,
            cornerRadii: CGSize(width: radius, height: radius)
        )
        return Path(path.cgPath)
    }
}

#Preview {
    LiveActivityView()
        .environmentObject(ActivityTrackingViewModel())
}