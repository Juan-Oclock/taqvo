//
//  MapRouteView.swift
//  Taqvo
//
//  Generated by Assistant on 10/17/25
//

import SwiftUI
import MapKit
import UIKit

struct MapRouteView: UIViewRepresentable {
    var route: [CLLocationCoordinate2D]
    var markers: [ActivityMarker] = []

    class Coordinator: NSObject, MKMapViewDelegate {
        func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
            if let polyline = overlay as? MKPolyline {
                let r = MKPolylineRenderer(polyline: polyline)
                r.strokeColor = .systemGreen
                r.lineWidth = 4
                return r
            }
            return MKOverlayRenderer(overlay: overlay)
        }

        func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
            if annotation is MKUserLocation { return nil }
            let id = "taqvo.marker"
            let view = mapView.dequeueReusableAnnotationView(withIdentifier: id) as? MKMarkerAnnotationView ?? MKMarkerAnnotationView(annotation: annotation, reuseIdentifier: id)
            view.markerTintColor = .systemBlue
            view.glyphImage = UIImage(systemName: "mappin")
            view.canShowCallout = true
            return view
        }
    }

    func makeCoordinator() -> Coordinator { Coordinator() }

    func makeUIView(context: Context) -> MKMapView {
        let map = MKMapView()
        map.delegate = context.coordinator
        map.showsUserLocation = true
        map.isPitchEnabled = true
        map.isRotateEnabled = false
        // Respect app theme selection
        let theme = UserDefaults.standard.string(forKey: "appTheme") ?? "system"
        let style: UIUserInterfaceStyle
        switch theme {
        case "dark": style = .dark
        case "light": style = .light
        default: style = .unspecified
        }
        map.overrideUserInterfaceStyle = style
        return map
    }

    func updateUIView(_ map: MKMapView, context: Context) {
        // Avoid CAMetalLayer warnings when the view hasn't been sized yet.
        guard map.bounds.width > 0 && map.bounds.height > 0 else { return }

        // Overlays
        map.removeOverlays(map.overlays)
        if route.count > 1 {
            let polyline = MKPolyline(coordinates: route, count: route.count)
            map.addOverlay(polyline)
            let region = MKCoordinateRegion(polyline.boundingMapRect)
            map.setRegion(regionThatFits(region: region, paddingScale: 1.2), animated: true)
        } else if let last = route.last {
            let region = MKCoordinateRegion(center: last, latitudinalMeters: 800, longitudinalMeters: 800)
            map.setRegion(region, animated: true)
        }

        // Annotations (markers)
        let toRemove = map.annotations.filter { !($0 is MKUserLocation) }
        map.removeAnnotations(toRemove)
        let annotations: [MKPointAnnotation] = markers.map { m in
            let ann = MKPointAnnotation()
            ann.coordinate = m.coordinate
            ann.title = m.note ?? "Marker"
            if m.note == nil { ann.subtitle = m.timestamp.formatted(date: .omitted, time: .shortened) }
            return ann
        }
        map.addAnnotations(annotations)
    }

    private func regionThatFits(region: MKCoordinateRegion, paddingScale: Double) -> MKCoordinateRegion {
        MKCoordinateRegion(center: region.center,
                           span: MKCoordinateSpan(latitudeDelta: region.span.latitudeDelta * paddingScale,
                                                   longitudeDelta: region.span.longitudeDelta * paddingScale))
    }
}